<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://avery-blog.vercel.app/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Avery</title>
    <link>https://avery-blog.vercel.app/</link>
    <description>Avery</description>
    <language>zh-CN</language>
    <pubDate>Wed, 03 Aug 2022 13:01:14 GMT</pubDate>
    <lastBuildDate>Wed, 03 Aug 2022 13:01:14 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>Vue</category>
    <category>浏览器</category>
    <category>数据结构与算法</category>
    <category>设计模式</category>
    <category>前端工程化</category>
    <category>JavaScript</category>
    <category>零碎的文章</category>
    <category>使用指南</category>
    <item>
      <title>使用Fetch</title>
      <link>https://avery-blog.vercel.app/willbe/Vue/Fetch.html</link>
      <guid>https://avery-blog.vercel.app/willbe/Vue/Fetch.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">使用Fetch</source>
      <category>Vue</category>
      <pubDate>Tue, 19 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="使用fetch" tabindex="-1"> 使用Fetch</h1>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API" target="_blank" rel="noopener noreferrer">Fetch API</a> 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，例如请求和响应。它还提供了一个全局 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch" target="_blank" rel="noopener noreferrer"><code>fetch()</code></a> 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。</p>
<p>这种功能以前是使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener noreferrer"><code>XMLHttpRequest</code></a> 实现的。Fetch 提供了一个更理想的替代方案，可以很容易地被其他技术使用，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener noreferrer"><code>Service Workers</code></a>。Fetch 还提供了专门的逻辑空间来定义其他与 HTTP 相关的概念，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" target="_blank" rel="noopener noreferrer">CORS</a> 和 HTTP 的扩展。</p>
<p><code>fetch</code>与<code>jQuery.ajax()</code>主要有以下的不同：</p>
<ul>
<li>当接受到一个代表错误的HTTP状态码时，从<code>fecth</code>返回的Promise <strong>不会被标记为reject</strong>，即使响应的HTTP状态码是404或500，它会将Promise状态标记为resolve（如果响应的HTTP状态码不在200-299之间，则设置resolve返回值的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/ok" target="_blank" rel="noopener noreferrer"><code>ok</code></a> 属性为false）， <strong>只有当网络故障或请求被阻止时，才会标记为reject</strong></li>
<li><code>fetch</code> <strong>不会发送跨域cookie</strong>，除非使用了 <em>credentials</em> 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch#%E5%8F%82%E6%95%B0" target="_blank" rel="noopener noreferrer">初始化选项</a>。（默认的credentials变更为 <code>same-origin</code> ）</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>实现浏览器多标签页通信</title>
      <link>https://avery-blog.vercel.app/willbe/browser/%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%80%9A%E4%BF%A1.html</link>
      <guid>https://avery-blog.vercel.app/willbe/browser/%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%80%9A%E4%BF%A1.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">实现浏览器多标签页通信</source>
      <category>浏览器</category>
      <pubDate>Mon, 18 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="实现浏览器多标签页通信" tabindex="-1"> 实现浏览器多标签页通信</h1>
<h2 id="localstorage实现通信" tabindex="-1"> localStorage实现通信</h2>
<p>localStrorage的特点：</p>
<ul>
<li>同域共享存储空间</li>
<li>持久化将数据存储浏览器</li>
<li>提供事件监听localStorage变化</li>
</ul>
<p>也就是说如果多个标签页跨域了，那么数据将无法共享。</p>
<p>示例：</p>
<div><pre><code>//pageA.html
<span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
<span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
        window<span>.</span><span>addEventListener</span><span>(</span><span>"storage"</span><span>,</span> <span>(</span><span>e</span><span>)</span> <span>=></span> <span>{</span>
            console<span>.</span><span>info</span><span>(</span><span>"localStorage发生变化："</span><span>,</span> e<span>)</span>
        <span>}</span><span>)</span>
    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><div><pre><code>//pageB.html
<span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
<span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>h1</span><span>></span></span>pageB<span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>id</span><span><span>=</span><span>"</span>btnB<span>"</span></span><span>></span></span>添加数据到localStorage<span><span><span>&lt;/</span>button</span><span>></span></span>

<span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
    <span>let</span> btnB <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>"btnB"</span><span>)</span><span>;</span>
    <span>let</span> num <span>=</span> <span>0</span><span>;</span>
    btnB<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        localStorage<span>.</span><span>setItem</span><span>(</span><span>"num"</span><span>,</span> num<span>++</span><span>)</span>
    <span>}</span><span>)</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>点击b页面的按钮之后，A页面输出</p>
<p><img src="@source/.vuepress/public/image/image-20220720214737731.png" alt="image-20220720214737731" loading="lazy"></p>
<p>可以看到在pageA中不仅可以拿到改变后的值，还可以拿到改变之前的值。通过这种方式，我们就可以将两个页面的数据进行同步了。</p>
<p><strong>注意点：</strong></p>
<ul>
<li>pageA和pageB同源，即域名、端口、协议等都是相同的。</li>
<li>使用storage事件监听localStorage变化</li>
</ul>
<p>如果只是需要两个页面之间数据共享，那么可以不使用storage监听方法，直接通过localStorage.getItem()获取即可。</p>
<h2 id="websocket" tabindex="-1"> webSocket</h2>
<p><strong>webSocket的特点：</strong></p>
<ul>
<li>保持连接状态，HTTP协议是无状态连接，即请求完毕后就会关闭连接</li>
<li>全双工通信，客户端和服务端平等对待，可以互相通信</li>
<li>建立在TCP协议之上</li>
<li>没有同源共享策略，即可实现跨域共享</li>
</ul>
<p>用websocket实现浏览器多页通信</p>
<p>假如我们的A、B页面都与服务器建立了websocket连接，那么两个页面都可以实时接收服务器发来的消息，也可以实时向服务端发送消息。如果A页面更改了数据，那么向服务端发送一条消息或数据，服务端将这条数据或消息发送给B页面，类似于”中介“</p>
<p>实例：</p>
<p>我们先来搭建一个简单的websocket服务器，用于pageA和pageB的连接，新建index.js文件。</p>
<p><strong>初始化命令：</strong></p>
<div><pre><code>npm init <span>-</span>y
npm install <span>--</span>save ws
运行命令：node index<span>.</span>js
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><strong>代码如下：</strong></p>
<p>index.js</p>
<div><pre><code><span>let</span> WebSocketServer<span>=</span><span>require</span><span>(</span><span>"ws"</span><span>)</span><span>.</span>Server
<span>let</span> wss<span>=</span><span>new</span> <span>WebSocketServer</span><span>(</span><span>{</span><span>port</span><span>:</span><span>3000</span><span>}</span><span>)</span>

<span>// 创建保存所有已连接到服务器的客户端对象的数组</span>
<span>let</span> clients<span>=</span><span>[</span><span>]</span>

wss<span>.</span><span>on</span><span>(</span><span>"connection"</span><span>,</span><span>function</span><span>(</span><span>client</span><span>)</span><span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"一个客户端连接到服务器"</span><span>)</span><span>;</span>
    <span>if</span><span>(</span>clients<span>.</span><span>indexOf</span><span>(</span>client<span>)</span><span>===</span><span>-</span><span>1</span><span>)</span><span>{</span>
        clients<span>.</span><span>push</span><span>(</span>client<span>)</span>
        client<span>.</span><span>on</span><span>(</span><span>"message"</span><span>,</span><span>function</span><span>(</span><span>msg</span><span>)</span><span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>"收到消息:"</span> <span>+</span> msg<span>)</span>
            <span>for</span><span>(</span><span>let</span> key <span>of</span> clients<span>)</span><span>{</span>
                <span>if</span><span>(</span>key<span>!==</span>client<span>)</span><span>{</span>
                    key<span>.</span><span>send</span><span>(</span>msg<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span>
                <span>}</span>
            <span>}</span>
        <span>}</span><span>)</span>
    <span>}</span>
<span>}</span><span>)</span>


</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><div><pre><code>//pageA
<span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
<span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
        <span>var</span> ws<span>=</span><span>new</span> <span>WebSocket</span><span>(</span><span>'ws://localhost:3000/'</span><span>)</span><span>;</span>
        ws<span>.</span><span>open</span><span>=</span><span>function</span><span>(</span><span>)</span><span>{</span>
             console<span>.</span><span>log</span><span>(</span><span>"websocket连接成功"</span><span>)</span>
        <span>}</span>
        ws<span>.</span><span>onmessage</span><span>=</span><span>function</span><span>(</span><span>e</span><span>)</span><span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>"服务端发送的消息"</span><span>,</span> e<span>.</span>data<span>)</span>
        <span>}</span>
    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><div><pre><code>//pageB
<span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
<span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>h1</span><span>></span></span>pageB<span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>id</span><span><span>=</span><span>"</span>btnB<span>"</span></span><span>></span></span>button<span><span><span>&lt;/</span>button</span><span>></span></span>
    
<span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
    <span>let</span> btnB <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>"btnB"</span><span>)</span><span>;</span>
    <span>let</span> num <span>=</span> <span>0</span><span>;</span>
    btnB<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        ws<span>.</span><span>send</span><span>(</span><span><span>`</span><span>客户端B发送的消息:</span><span><span>${</span>num<span>++</span><span>}</span></span><span>`</span></span><span>)</span><span>;</span>
    <span>}</span><span>)</span>
    <span>// 创建一个websocket连接</span>
    <span>var</span> ws <span>=</span> <span>new</span> <span>WebSocket</span><span>(</span><span>'ws://localhost:3000/'</span><span>)</span><span>;</span>
    <span>// WebSocket连接成功回调</span>
    ws<span>.</span><span>onopen</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span><span>"websocket连接成功B"</span><span>)</span>
    <span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>当我们点击pageB中的按钮时，会通过websocket向服务端发送一条消息，服务端接收到这条消息之后，会将消息转发给pageA，这样pageA就得到了pageB传来的数据。</p>
<p><img src="@source/.vuepress/public/image/image-20220721113251167.png" alt="image-20220721113251167" loading="lazy"></p>
<p>总体来说，原理很简单，只是需要了解websocket。通常情况下，我们不建议使用websocket来进行多标签页通信，因为这回增加服务器的负担。</p>
<h2 id="sharedworker" tabindex="-1"> SharedWorker</h2>
<p>SharedWorker是webWorker中的一种，webWorker可以为JS创造多线程环境，它可以由所有同源页面共享，利用这个特点，实现浏览器的多标签页通信</p>
<p><strong>sharedWorker特点：</strong></p>
<ul>
<li>
<p>跨域不共享，即多个标签页不能跨域</p>
</li>
<li>
<p>使用port发送和接收消息</p>
</li>
<li>
<p>如果url相同，且是同一个js，那么只会创建一个sharedWorker，多个页面共享这个sharedWorker</p>
<p>跟webSocket类似</p>
</li>
</ul>
<p>worker.js</p>
<div><pre><code>
<span>const</span> set <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span>
<span>onconnect</span> <span>=</span> <span>event</span> <span>=></span> <span>{</span>
    <span>const</span> port <span>=</span> event<span>.</span>ports<span>[</span><span>0</span><span>]</span>
    set<span>.</span><span>add</span><span>(</span>port<span>)</span>


    <span>// 接收信息</span>
    port<span>.</span><span>onmessage</span> <span>=</span> <span>e</span> <span>=></span> <span>{</span>
        <span>// 广播信息</span>
        set<span>.</span><span>forEach</span><span>(</span><span>p</span> <span>=></span> <span>{</span>
            p<span>.</span><span>postMessage</span><span>(</span>e<span>.</span>data<span>)</span>
        <span>}</span><span>)</span>
    <span>}</span>


    <span>// 发送信息</span>
    port<span>.</span><span>postMessage</span><span>(</span><span>"worker广播信息"</span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>pageA页面</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
<span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
        <span>const</span> worker<span>=</span><span>new</span> <span>SharedWorker</span><span>(</span><span>'./worker.js'</span><span>)</span>
        worker<span>.</span>port<span>.</span><span>onmessage</span><span>=</span><span>e</span><span>=></span><span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>"pageA收到信息"</span><span>,</span>e<span>.</span>data<span>)</span><span>;</span>
        <span>}</span>
    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>pageB页面</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>h1</span><span>></span></span>pageB<span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>id</span><span><span>=</span><span>"</span>btnB<span>"</span></span><span>></span></span>button<span><span><span>&lt;/</span>button</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
  <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
    <span>const</span> worker <span>=</span> <span>new</span> <span>SharedWorker</span><span>(</span><span>"./worker.js"</span><span>)</span><span>;</span>
    <span>let</span> btnB <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>"btnB"</span><span>)</span><span>;</span>
    <span>let</span> num <span>=</span> <span>0</span><span>;</span>
    btnB<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      worker<span>.</span>port<span>.</span><span>postMessage</span><span>(</span><span><span>`</span><span>客户端B发送的消息:</span><span><span>${</span>num<span>++</span><span>}</span></span><span>`</span></span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
  </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p><strong>调试sharedWorker：</strong></p>
<p>我们如何查看当前是运行的哪个sharedWorker呢？可以在浏览时输入：chrome://inspect。</p>
<p>找到sharedWorker选项，就可以看到运行的sharedWorker,如下图：</p>
<p><img src="@source/.vuepress/public/image/image-20220721145526741.png" alt="image-20220721145526741" loading="lazy"></p>
<h2 id="cookie-setinterval" tabindex="-1"> Cookie + setInterval</h2>
<p>cookie可以用来存储数据，而且是同源共享的</p>
<p>cookie的特点：</p>
<ul>
<li>跨域不共享</li>
<li>具有存储空间限制</li>
<li>请求自动携带cookie</li>
</ul>
<p>示例：</p>
<p>pageA页面</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
<span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
        <span>setInterval</span><span>(</span><span>(</span><span>)</span><span>=></span><span>{</span>
            <span>// 加入定时器，让函数每一秒就调用一次，实现页面刷新</span>
            console<span>.</span><span>log</span><span>(</span><span>"cookie"</span><span>,</span>document<span>.</span>cookie<span>)</span><span>;</span>
        <span>}</span><span>,</span><span>1000</span><span>)</span>
    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>pageB页面</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
<span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;</span>body</span><span>></span></span>
     <span><span><span>&lt;</span>h1</span><span>></span></span>pageB<span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>id</span><span><span>=</span><span>"</span>btnB<span>"</span></span><span>></span></span>添加数据到localStorage<span><span><span>&lt;/</span>button</span><span>></span></span>
<span><span><span>&lt;/</span>body</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
  <span>let</span> btnB <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>"btnB"</span><span>)</span><span>;</span>
  <span>let</span> num <span>=</span> <span>0</span><span>;</span>
  btnB<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    document<span>.</span>cookie <span>=</span> <span><span>`</span><span>客户端B发送的消息:</span><span><span>${</span>num<span>++</span><span>}</span></span><span>`</span></span>
  <span>}</span><span>)</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p><img src="@source/.vuepress/public/image/image-20220721151156974.png" alt="image-20220721151156974" loading="lazy"></p>
<h2 id="broadcast-channel" tabindex="-1"> BroadCast Channel</h2>
<p>BroadCast Channel 可以帮我们创建一个用于广播的通信频道。当所有页面都监听同一频道的消息时，其中某一个页面通过它发送的消息就会被其他所有页面收到。</p>
<p>示例：</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
<span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
<span><span><span>&lt;/</span>head</span><span>></span></span>
<span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
       <span>const</span> bc<span>=</span><span>new</span> <span>BroadcastChannel</span><span>(</span><span>'B-Broad'</span><span>)</span>
       bc<span>.</span><span>onmessage</span><span>=</span><span>function</span><span>(</span><span>e</span><span>)</span><span>{</span>
           <span>const</span> data<span>=</span>e<span>.</span>data
           console<span>.</span><span>log</span><span>(</span>data<span>)</span><span>;</span>
       <span>}</span>
    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>h1</span><span>></span></span>pageB<span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>id</span><span><span>=</span><span>"</span>btnB<span>"</span></span><span>></span></span>button<span><span><span>&lt;/</span>button</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
  <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
    <span>const</span> bc <span>=</span> <span>new</span> <span>BroadcastChannel</span><span>(</span><span>"B-Broad"</span><span>)</span><span>;</span>
    <span>let</span> btnB <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>"btnB"</span><span>)</span><span>;</span>
    <span>let</span> num <span>=</span> <span>0</span><span>;</span>
    btnB<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      bc<span>.</span><span>postMessage</span><span>(</span><span><span>`</span><span>B传来的消息:</span><span><span>${</span>num<span>++</span><span>}</span></span><span>`</span></span><span>)</span>
    <span>}</span><span>)</span><span>;</span>
  </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p><img src="@source/.vuepress/public/image/image-20220721154839194.png" alt="image-20220721154839194" loading="lazy"></p>
<h2 id="service-worker" tabindex="-1"> Service Worker</h2>
<p>Service Worker 是一个可以长期运行在后台的 Worker，能够实现与页面的双向通信。多页面共享间的 Service Worker 可以共享，将 Service Worker 作为消息的处理中心（中央站）即可实现广播效果。</p>
<p>示例：</p>
<p>serviceWorker.js</p>
<p>Service Worker 本身并不自动具备“广播通信”的功能，需要我们添加些代码，将其改造成消息中转站：</p>
<p>我们在 Service Worker 中监听了<code>message</code>事件，获取页面（从 Service Worker 的角度叫 client）发送的信息。然后通过<code>self.clients.matchAll()</code>获取当前注册了该 Service Worker 的所有页面，通过调用每个client（即页面）的<code>postMessage</code>方法，向页面发送消息。这样就把从一处（某个Tab页面）收到的消息通知给了其他页面。</p>
<div><pre><code>self<span>.</span><span>addEventListener</span><span>(</span><span>'message'</span><span>,</span><span>function</span><span>(</span><span>e</span><span>)</span><span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'service worker收到的消息'</span><span>,</span>e<span>.</span>data<span>)</span><span>;</span>
    e<span>.</span><span>waitUntil</span><span>(</span>
        self<span>.</span>clients<span>.</span><span>matchAll</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>function</span> <span>(</span><span>clients</span><span>)</span> <span>{</span>
            <span>if</span> <span>(</span><span>!</span>clients <span>||</span> clients<span>.</span>length <span>===</span> <span>0</span><span>)</span> <span>{</span>
                <span>return</span><span>;</span>
            <span>}</span>
            clients<span>.</span><span>forEach</span><span>(</span><span>function</span> <span>(</span><span>client</span><span>)</span> <span>{</span>
                client<span>.</span><span>postMessage</span><span>(</span>e<span>.</span>data<span>)</span><span>;</span>
            <span>}</span><span>)</span><span>;</span>
        <span>}</span><span>)</span>
    <span>)</span><span>;</span>
<span>}</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>pageA</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
      navigator<span>.</span>serviceWorker<span>.</span><span>register</span><span>(</span><span>"./serviceWorker.js"</span><span>)</span><span>.</span><span>then</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span><span>"swA注册成功"</span><span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
      navigator<span>.</span>serviceWorker<span>.</span><span>addEventListener</span><span>(</span><span>"message"</span><span>,</span> <span>function</span> <span>(</span><span>e</span><span>)</span> <span>{</span>
        <span>const</span> data <span>=</span> e<span>.</span>data<span>;</span>
        console<span>.</span><span>log</span><span>(</span>data<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>pageB</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>h1</span><span>></span></span>pageB<span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>id</span><span><span>=</span><span>"</span>btnB<span>"</span></span><span>></span></span>button<span><span><span>&lt;/</span>button</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
  <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
     navigator<span>.</span>serviceWorker<span>.</span><span>register</span><span>(</span><span>'./serviceWorker.js'</span><span>)</span><span>.</span><span>then</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>"swB注册成功"</span><span>)</span><span>;</span>
        <span>}</span><span>)</span>
    <span>let</span> btnB <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>"btnB"</span><span>)</span><span>;</span>
    <span>let</span> num <span>=</span> <span>0</span><span>;</span>
    btnB<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        navigator<span>.</span>serviceWorker<span>.</span>controller<span>.</span><span>postMessage</span><span>(</span><span><span>`</span><span>B传来的消息:</span><span><span>${</span>num<span>++</span><span>}</span></span><span>`</span></span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
  </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id="postmessage" tabindex="-1"> postMessage</h2>
<p>postMessage是html5引入的API，postMessage()方法允许来自不同源的脚本采用异步的方式进行有效的通信，可以实现跨文本文档，多窗口，跨域消息传递，多用于窗口间数据通信，这也使它成为跨域通信的一种有效解决方案</p>
<p>postMessage()方法用于安全地实现跨源通信。</p>
<p>1、语法：otherWindow.postMessage(message,targetOrigin,[transfer]);</p>
<p>（1）<code>otherWindow：</code>其他窗口的一个引用，比如iframe的contentWindow属性、执行window.open返回的窗口对象、或者是命名过或数值索引的window.frames。</p>
<p>（2）<code>message：</code>将要发送到其他 window的数据。它将会被结构化克隆算法序列化。这意味着你可以不受什么限制的将数据对象安全的传送给目标窗口而无需自己序列化。</p>
<p>（3）<code>targetOrigin：</code>通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串&quot;*&quot;（表示无限制）或者一个URI。</p>
<p>在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；</p>
<p>只有三者完全匹配，消息才会被发送。</p>
<p>这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的origin属性完全一致，来防止密码被恶意的第三方截获。</p>
<p>如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是*。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</p>
<p>（4）<code>transfer</code>可选：是一串和message 同时传递的 <code>Transferable</code> 对象，这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。</p>
<p>2、<strong>接收数据：监听message事件的发生</strong></p>
<div><pre><code><span>// 执行如下代码, 其他window可以监听分发的message:</span>
window<span>.</span><span>addEventListener</span><span>(</span><span>"message"</span><span>,</span> receiveMessage<span>,</span> <span>false</span><span>)</span><span>;</span>
<span>function</span> <span>receiveMessage</span><span>(</span><span>event</span><span>)</span> <span>{</span>
  <span>var</span> origin <span>=</span> event<span>.</span>origin
  <span>if</span> <span>(</span>origin <span>!==</span> <span>"http://example.org:8080"</span><span>)</span> <span>return</span><span>;</span>
  <span>// ...</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>message 的属性有:</p>
<p>（1）<code>data：</code>从其他 window 中传递过来的对象。</p>
<p>（2）<code>origin：</code>调用 <code>postMessage</code> 时消息发送方窗口的 origin。</p>
<p>这个字符串由 协议、“😕/“、域名、“ : 端口号”拼接而成。例如 “<code>https://example.org</code> (隐含端口 <code>443</code>)”、“<code>http://example.net</code> (隐含端口 <code>80</code>)”、“<code>http://example.com:8080</code>”。</p>
<p>请注意，这个origin不能保证是该窗口的当前或未来origin，因为postMessage被调用后可能被导航到不同的位置。</p>
<p>（3）<code>source：</code>对发送消息的窗口对象的引用，您可以使用此来在具有不同origin的两个窗口之间建立双向通信。</p>
<p>（4）type: 指的是发送消息的类型;</p>
<p>event 对象的打印结果截图如下：</p>
<p><img src="@source/.vuepress/public/image/image-20220721164702020.png" alt="image-20220721164702020" loading="lazy"></p>
<p>示例：</p>
<p>pageB</p>
<p>window.open打开新的页面，postMessage发送请求</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>h1</span><span>></span></span>pageB<span><span><span>&lt;/</span>h1</span><span>></span></span>
    <span><span><span>&lt;</span>button</span> <span>id</span><span><span>=</span><span>"</span>btnB<span>"</span></span><span>></span></span>button<span><span><span>&lt;/</span>button</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
  <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
    <span>var</span> newWindow <span>=</span> window<span>.</span><span>open</span><span>(</span><span>"http://127.0.0.1:5500/postMessage/pageA.html"</span><span>)</span><span>;</span>
    <span>let</span> num <span>=</span> <span>0</span><span>;</span>
    btnB<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      newWindow<span>.</span><span>postMessage</span><span>(</span><span>{</span> <span>msg</span><span>:</span> <span>"hello"</span> <span>}</span><span>,</span> <span>"*"</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
  </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>pageA</p>
<p>监听消息</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
      window<span>.</span><span>addEventListener</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>e</span><span>)</span> <span>=></span> <span>{</span>
        <span>let</span> message <span>=</span> e<span>.</span>data<span>;</span>
        console<span>.</span><span>log</span><span>(</span>message<span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p><img src="@source/.vuepress/public/image/image-20220721170753487.png" alt="image-20220721170753487" loading="lazy"></p>
<p>这里需要注意一点的就是：postMessage语法 - window.postMessage(msg,targetOrigin)，postMessage要通过 window 对象调用！因为这里的window不只是当前window，大部分使用postMessage的时候，都不是本页面的window，而是其他网页的window！如：</p>
<p>（1）iframe的contentWindow</p>
<p>（2）通过window.open方法打开的新窗口的window</p>
<p>（3）window.opener</p>
<p>（4）如果你使用postMessage时没有带window，那么当然，你就是用的本页面的window来调用了它。</p>
<h2 id="iframe桥实现跨域通信" tabindex="-1"> iframe桥实现跨域通信</h2>
<p>实现该功能，可以使用一个用户不可见的iframe作为“桥”，由于iframe与父页面间可以通过指定 <code>origin</code>来忽略同源限制，因此可以在每个页面去嵌入一个iframe（例如：<code>http://sample.com/bridge.html</code>），而这些 iframe 由于使用的是一个 url，因此属于同源页面，其通信方式可以复用上面第一部分提到的各种方式。</p>
<p>1、页面与 iframe 通信非常简单，首先需要在页面中监听 iframe 发来的消息，做相应的业务处理：</p>
<div><pre><code>window<span>.</span><span>addEventListener</span><span>(</span><span>'message'</span><span>,</span> <span>function</span> <span>(</span><span>e</span><span>)</span> <span>{</span>
    <span>// …… do something</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>2、然后，当页面要与其他的同源或非同源页面通信时，会先给 iframe 发送消息</p>
<div><pre><code>window<span>.</span>frames<span>[</span><span>0</span><span>]</span><span>.</span>window<span>.</span><span>postMessage</span><span>(</span>mydata<span>,</span> <span>'*'</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>其中为了简便此处将<code>postMessage</code>的第二个参数设为了<code>'*'</code>，你也可以设为 iframe 的 URL。</p>
<p>3、iframe 收到消息后，会使用某种跨页面消息通信技术在所有 iframe 间同步消息，例如下面使用的 Broadcast Channel：</p>
<div><pre><code><span>/* iframe 内代码 */</span>
<span>const</span> bc <span>=</span> <span>new</span> <span>BroadcastChannel</span><span>(</span><span>'A-Broad'</span><span>)</span><span>;</span>
<span>// 收到来自页面的消息后，在 iframe 间进行广播</span>
window<span>.</span><span>addEventListener</span><span>(</span><span>'message'</span><span>,</span> <span>function</span> <span>(</span><span>e</span><span>)</span> <span>{</span>
    bc<span>.</span><span>postMessage</span><span>(</span>e<span>.</span>data<span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>    
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>其他 iframe 收到通知后，则会将该消息同步给所属的父页面：</p>
<div><pre><code><span>/* iframe 内代码 */</span>
<span>// 对于收到的（iframe）广播消息，通知给所属的业务页面</span>
bc<span>.</span><span>onmessage</span> <span>=</span> <span>function</span> <span>(</span><span>e</span><span>)</span> <span>{</span>
    window<span>.</span>parent<span>.</span><span>postMessage</span><span>(</span>e<span>.</span>data<span>,</span> <span>'*'</span><span>)</span><span>;</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><img src="@source/.vuepress/public/image/image-20220721173918904.png" alt="image-20220721173918904" loading="lazy"></p>
<h2 id="总结" tabindex="-1"> 总结</h2>
<p>对于同源页面，常见的方式包括：</p>
<ul>
<li>广播模式：Broadcast Channe / Service Worker / LocalStorage + StorageEvent</li>
<li>共享存储模式：Shared Worker / IndexedDB / cookie</li>
<li>口口相传模式：window.open + window.opener</li>
<li>基于服务端：Websocket / Comet / SSE 等</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>经典排序</title>
      <link>https://avery-blog.vercel.app/willbe/dataStructure/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F.html</link>
      <guid>https://avery-blog.vercel.app/willbe/dataStructure/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">经典排序</source>
      <category>数据结构与算法</category>
      <pubDate>Sun, 31 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="经典排序" tabindex="-1"> 经典排序</h1>
<h2 id="冒泡排序" tabindex="-1"> 冒泡排序</h2>
<p>冒泡排序的原理：
每一趟只能确定将一个数归位。即第一趟只能确定将末位上的数归位，第二趟只能将倒数第 2 位上的数归位，依次类推下去。如果有 n 个数进行排序，只需将 n-1 个数归位，也就是要进行 n-1 趟操作。</p>
<p>而 “每一趟 ” 都需要从第一位开始进行相邻的两个数的比较，将较大的数放后面，比较完毕之后向后挪一位继续比较下面两个相邻的两个数大小关系，重复此步骤，直到最后一个还没归位的数。</p>
<p><img src="@source/.vuepress/public/image/image-20220728165622805.gif" alt="image-20220728165622805" loading="lazy"></p>
<ul>
<li>普通的冒泡排序</li>
</ul>
<div><pre><code><span>function</span> <span>bubbleSort</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  console<span>.</span><span>time</span><span>(</span><span>"普通冒泡耗时"</span><span>)</span><span>;</span>
  <span>let</span> size <span>=</span> arr<span>.</span>length<span>;</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> size <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> size <span>-</span> <span>1</span> <span>-</span> i<span>;</span> j<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>arr<span>[</span>j<span>]</span> <span>></span> arr<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
        <span>let</span> temp <span>=</span> arr<span>[</span>j<span>]</span><span>;</span>
        arr<span>[</span>j<span>]</span> <span>=</span> arr<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>;</span>
        arr<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> temp<span>;</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
  console<span>.</span><span>timeEnd</span><span>(</span><span>"普通冒泡耗时"</span><span>)</span><span>;</span>
  <span>return</span> arr<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ul>
<li>改进冒泡排：通过设置一标志性变量 pos,用于记录每趟排序中最后一次进行交换的位置。由于 pos 位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到 pos 位置即可。</li>
</ul>
<div><pre><code><span>function</span> <span>bubbleSort2</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  console<span>.</span><span>time</span><span>(</span><span>"改进冒泡1耗时"</span><span>)</span><span>;</span>
  <span>let</span> size <span>=</span> arr<span>.</span>length<span>;</span>
  <span>let</span> i <span>=</span> size <span>-</span> <span>1</span><span>;</span>
  <span>while</span> <span>(</span>i <span>></span> <span>0</span><span>)</span> <span>{</span>
    <span>let</span> pos <span>=</span> <span>0</span><span>;</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> i<span>;</span> j<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>arr<span>[</span>j<span>]</span> <span>></span> arr<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
        <span>let</span> tmp <span>=</span> arr<span>[</span>j<span>]</span><span>;</span>
        arr<span>[</span>j<span>]</span> <span>=</span> arr<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>;</span>
        arr<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> tmp<span>;</span>
        pos <span>=</span> j<span>;</span>
      <span>}</span>
    <span>}</span>
    i <span>=</span> pos<span>;</span>
  <span>}</span>
  console<span>.</span><span>timeEnd</span><span>(</span><span>"改进冒泡1耗时"</span><span>)</span><span>;</span>
  <span>return</span> arr<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ul>
<li>改进冒泡排序 2：传统冒泡排序中每一趟排序操作只能找到一个最大值或最小值,我们考虑利用在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半。</li>
</ul>
<div><pre><code><span>function</span> <span>bubbleSort3</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  console<span>.</span><span>time</span><span>(</span><span>"改进冒泡2耗时"</span><span>)</span><span>;</span>
  <span>let</span> low <span>=</span> <span>0</span><span>;</span>
  <span>let</span> height <span>=</span> arr<span>.</span>length <span>-</span> <span>1</span><span>;</span>
  <span>let</span> tmp<span>,</span> j<span>;</span>
  <span>while</span> <span>(</span>low <span>&lt;</span> height<span>)</span> <span>{</span>
    <span>for</span> <span>(</span>j <span>=</span> low<span>;</span> j <span>&lt;</span> height<span>;</span> <span>++</span>j<span>)</span> <span>{</span>
      <span>if</span> <span>(</span>arr<span>[</span>j<span>]</span> <span>></span> arr<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
        tmp <span>=</span> arr<span>[</span>j<span>]</span><span>;</span>
        arr<span>[</span>j<span>]</span> <span>=</span> arr<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>;</span>
        arr<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> tmp<span>;</span>
      <span>}</span>
    <span>}</span>
    <span>--</span>height<span>;</span>
    <span>for</span> <span>(</span>j <span>=</span> height<span>;</span> j <span>></span> low<span>;</span> <span>--</span>j<span>)</span> <span>{</span>
      <span>if</span> <span>(</span>arr<span>[</span>j<span>]</span> <span>&lt;</span> arr<span>[</span>j <span>-</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
        tmp <span>=</span> arr<span>[</span>j<span>]</span><span>;</span>
        arr<span>[</span>j<span>]</span> <span>=</span> arr<span>[</span>j <span>-</span> <span>1</span><span>]</span><span>;</span>
        arr<span>[</span>j <span>-</span> <span>1</span><span>]</span> <span>=</span> tmp<span>;</span>
      <span>}</span>
    <span>}</span>
    <span>++</span>low<span>;</span>
  <span>}</span>
  console<span>.</span><span>timeEnd</span><span>(</span><span>"改进冒泡2耗时"</span><span>)</span><span>;</span>
  <span>return</span> arr<span>;</span>
<span>}</span>
<span>let</span> arr <span>=</span> <span>[</span><span>3</span><span>,</span> <span>44</span><span>,</span> <span>38</span><span>,</span> <span>5</span><span>,</span> <span>47</span><span>,</span> <span>15</span><span>,</span> <span>36</span><span>,</span> <span>26</span><span>,</span> <span>27</span><span>,</span> <span>2</span><span>,</span> <span>46</span><span>,</span> <span>4</span><span>,</span> <span>19</span><span>,</span> <span>50</span><span>,</span> <span>48</span><span>]</span><span>;</span>
<span>// console.log(bubbleSort(arr));</span>
<span>// console.log(bubbleSort2(arr));</span>
console<span>.</span><span>log</span><span>(</span><span>bubbleSort3</span><span>(</span>arr<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h2 id="选择排序" tabindex="-1"> 选择排序</h2>
<p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<div><pre><code><span>function</span> <span>selectSort</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  console<span>.</span><span>time</span><span>(</span><span>"选择排序耗时"</span><span>)</span><span>;</span>
  <span>let</span> miniIndex <span>=</span> <span>0</span><span>;</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> arr<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    miniIndex <span>=</span> i<span>;</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> arr<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>arr<span>[</span>j<span>]</span> <span>&lt;</span> arr<span>[</span>miniIndex<span>]</span><span>)</span> <span>{</span>
        miniIndex <span>=</span> j<span>;</span>
      <span>}</span>
    <span>}</span>
    <span>let</span> tmp <span>=</span> arr<span>[</span>i<span>]</span><span>;</span>
    arr<span>[</span>i<span>]</span> <span>=</span> arr<span>[</span>miniIndex<span>]</span><span>;</span>
    arr<span>[</span>miniIndex<span>]</span> <span>=</span> tmp<span>;</span>
  <span>}</span>
  console<span>.</span><span>timeEnd</span><span>(</span><span>"选择排序耗时"</span><span>)</span><span>;</span>
  <span>return</span> arr<span>;</span>
<span>}</span>

<span>let</span> selectArr <span>=</span> <span>[</span><span>3</span><span>,</span> <span>44</span><span>,</span> <span>38</span><span>,</span> <span>5</span><span>,</span> <span>47</span><span>,</span> <span>15</span><span>,</span> <span>36</span><span>,</span> <span>26</span><span>,</span> <span>27</span><span>,</span> <span>2</span><span>,</span> <span>46</span><span>,</span> <span>4</span><span>,</span> <span>19</span><span>,</span> <span>50</span><span>,</span> <span>48</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>selectSort</span><span>(</span>selectArr<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="插入排序" tabindex="-1"> 插入排序</h2>
<p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<div><pre><code><span>function</span> <span>insertSort</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  console<span>.</span><span>time</span><span>(</span><span>"插入排序耗时"</span><span>)</span><span>;</span>
  <span>let</span> i <span>=</span> <span>1</span><span>;</span>
  <span>while</span> <span>(</span>i <span>&lt;</span> arr<span>.</span>length<span>)</span> <span>{</span>
    <span>let</span> key <span>=</span> arr<span>[</span>i<span>]</span><span>;</span>
    <span>let</span> j <span>=</span> i <span>-</span> <span>1</span><span>;</span>
    <span>while</span> <span>(</span>j <span>>=</span> <span>0</span> <span>&amp;&amp;</span> key <span>&lt;</span> arr<span>[</span>j<span>]</span><span>)</span> <span>{</span>
      arr<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> arr<span>[</span>j<span>]</span><span>;</span>
      j<span>--</span><span>;</span>
    <span>}</span>
    arr<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> key<span>;</span>
    i<span>++</span><span>;</span>
  <span>}</span>
  console<span>.</span><span>timeEnd</span><span>(</span><span>"插入排序耗时"</span><span>)</span><span>;</span>
  <span>return</span> arr<span>;</span>
<span>}</span>
<span>let</span> insertArr <span>=</span> <span>[</span><span>3</span><span>,</span> <span>44</span><span>,</span> <span>38</span><span>,</span> <span>5</span><span>,</span> <span>47</span><span>,</span> <span>15</span><span>,</span> <span>36</span><span>,</span> <span>26</span><span>,</span> <span>27</span><span>,</span> <span>2</span><span>,</span> <span>46</span><span>,</span> <span>4</span><span>,</span> <span>19</span><span>,</span> <span>50</span><span>,</span> <span>48</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>insertSort</span><span>(</span>insertArr<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>
<li>
<p>改进插入排序：通过对前面排序好的数据区进行二分查找，找到那个区域，low 值的右边就是我们要挪动的，low 值就为我们要插入的值</p>
<div><pre><code><span>// 改进后的插入排序</span>
<span>function</span> <span>insertSort1</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  console<span>.</span><span>time</span><span>(</span><span>"插入排序改进的耗时"</span><span>)</span><span>;</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> arr<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>let</span> key <span>=</span> arr<span>[</span>i<span>]</span><span>;</span>
    <span>let</span> low <span>=</span> <span>0</span><span>;</span>
    <span>let</span> height <span>=</span> i <span>-</span> <span>1</span><span>;</span>
    <span>while</span> <span>(</span>low <span>&lt;=</span> height<span>)</span> <span>{</span>
      <span>let</span> mid <span>=</span> Math<span>.</span><span>floor</span><span>(</span><span>(</span>low <span>+</span> height<span>)</span> <span>/</span> <span>2</span><span>)</span><span>;</span>
      <span>if</span> <span>(</span>arr<span>[</span>mid<span>]</span> <span>></span> key<span>)</span> <span>{</span>
        height <span>=</span> mid <span>-</span> <span>1</span><span>;</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>arr<span>[</span>mid<span>]</span> <span>&lt;</span> key<span>)</span> <span>{</span>
        low <span>=</span> mid <span>+</span> <span>1</span><span>;</span>
      <span>}</span>
    <span>}</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>-</span> <span>1</span><span>;</span> j <span>>=</span> low<span>;</span> j<span>--</span><span>)</span> <span>{</span>
      arr<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> arr<span>[</span>j<span>]</span><span>;</span>
    <span>}</span>
    arr<span>[</span>low<span>]</span> <span>=</span> key<span>;</span>
  <span>}</span>
  console<span>.</span><span>timeEnd</span><span>(</span><span>"插入排序改进的耗时"</span><span>)</span><span>;</span>
  <span>return</span> arr<span>;</span>
<span>}</span>
<span>let</span> insertArr <span>=</span> <span>[</span><span>3</span><span>,</span> <span>44</span><span>,</span> <span>38</span><span>,</span> <span>5</span><span>,</span> <span>47</span><span>,</span> <span>15</span><span>,</span> <span>36</span><span>,</span> <span>26</span><span>,</span> <span>27</span><span>,</span> <span>2</span><span>,</span> <span>46</span><span>,</span> <span>4</span><span>,</span> <span>19</span><span>,</span> <span>50</span><span>,</span> <span>48</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>insertSort1</span><span>(</span>insertArr<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></li>
</ul>
<h2 id="希尔排序" tabindex="-1"> 希尔排序</h2>
<ul>
<li>
<p>希尔排序（Shellsort）也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序。希尔（Donald Shell）于 1959 年提出这种排序算法。</p>
</li>
<li>
<p>希尔排序是<strong>非稳定排序算法</strong>。</p>
</li>
<li>
<p><strong>希尔排序是把数据序列按下标的一定增量分组，对每组使用直接插入排序算法排序；</strong></p>
</li>
<li>
<p><strong>随着增量逐渐减少，每组包含的数据个数越来越多，当增量减至 1 时，整个文件恰被分成一组，整个数据序列就已经排序好了，算法便终止。</strong></p>
</li>
</ul>
<p><img src="@source/.vuepress/public/image/image-20220729110551253.png" alt="image-20220729110551253" loading="lazy"></p>
<div><pre><code><span>// 希尔排序</span>
<span>function</span> <span>shellSort</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  <span>let</span> gap <span>=</span> Math<span>.</span><span>floor</span><span>(</span>arr<span>.</span>length <span>/</span> <span>2</span><span>)</span><span>;</span>
  <span>for</span> <span>(</span>gap<span>;</span> gap <span>>=</span> <span>1</span><span>;</span> gap <span>=</span> Math<span>.</span><span>floor</span><span>(</span>gap <span>/</span> <span>2</span><span>)</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> gap<span>;</span> i <span>&lt;</span> arr<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>let</span> temp <span>=</span> arr<span>[</span>i<span>]</span><span>;</span>
      <span>let</span> j<span>;</span>
      <span>for</span> <span>(</span>j <span>=</span> i <span>-</span> gap<span>;</span> j <span>>=</span> <span>0</span> <span>&amp;&amp;</span> temp <span>&lt;</span> arr<span>[</span>j<span>]</span><span>;</span> j <span>=</span> j <span>-</span> gap<span>)</span> <span>{</span>
        arr<span>[</span>j <span>+</span> gap<span>]</span> <span>=</span> arr<span>[</span>j<span>]</span><span>;</span>
      <span>}</span>
      arr<span>[</span>j <span>+</span> gap<span>]</span> <span>=</span> temp<span>;</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> arr<span>;</span>
<span>}</span>
<span>let</span> shellArr <span>=</span> <span>[</span><span>3</span><span>,</span> <span>44</span><span>,</span> <span>38</span><span>,</span> <span>5</span><span>,</span> <span>47</span><span>,</span> <span>15</span><span>,</span> <span>36</span><span>,</span> <span>26</span><span>,</span> <span>27</span><span>,</span> <span>2</span><span>,</span> <span>46</span><span>,</span> <span>4</span><span>,</span> <span>19</span><span>,</span> <span>50</span><span>,</span> <span>48</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>shellSort</span><span>(</span>shellArr<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="归并排序" tabindex="-1"> 归并排序</h2>
<p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为 2-路归并。</p>
<p><img src="@source/.vuepress/public/image/image-20220729213534637.png" alt="image-20220729213534637" loading="lazy"></p>
<div><pre><code><span>// 归并排序</span>
<span>function</span> <span>mergeSort</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>arr<span>.</span>length <span>&lt;</span> <span>2</span><span>)</span> <span>{</span>
    <span>return</span> arr<span>;</span>
  <span>}</span>
  <span>let</span> mid <span>=</span> Math<span>.</span><span>floor</span><span>(</span>arr<span>.</span>length <span>/</span> <span>2</span><span>)</span><span>;</span>
  <span>let</span> left <span>=</span> arr<span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> mid<span>)</span><span>;</span>
  <span>let</span> right <span>=</span> arr<span>.</span><span>slice</span><span>(</span>mid<span>,</span> arr<span>.</span>length<span>)</span><span>;</span>
  <span>return</span> <span>merge</span><span>(</span><span>mergeSort</span><span>(</span>left<span>)</span><span>,</span> <span>mergeSort</span><span>(</span>right<span>)</span><span>)</span><span>;</span>
<span>}</span>
<span>function</span> <span>merge</span><span>(</span><span>left<span>,</span> right</span><span>)</span> <span>{</span>
  <span>let</span> res <span>=</span> <span>[</span><span>]</span><span>;</span>
  <span>while</span> <span>(</span>left<span>.</span>length <span>&amp;&amp;</span> right<span>.</span>length<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>left<span>[</span><span>0</span><span>]</span> <span>&lt;</span> right<span>[</span><span>0</span><span>]</span><span>)</span> <span>{</span>
      res<span>.</span><span>push</span><span>(</span>left<span>.</span><span>shift</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      res<span>.</span><span>push</span><span>(</span>right<span>.</span><span>shift</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  <span>while</span> <span>(</span>left<span>.</span>length<span>)</span> <span>{</span>
    res<span>.</span><span>push</span><span>(</span>left<span>.</span><span>shift</span><span>(</span><span>)</span><span>)</span><span>;</span>
  <span>}</span>
  <span>while</span> <span>(</span>right<span>.</span>length<span>)</span> <span>{</span>
    res<span>.</span><span>push</span><span>(</span>right<span>.</span><span>shift</span><span>(</span><span>)</span><span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> res<span>;</span>
<span>}</span>
<span>let</span> mergeArr <span>=</span> <span>[</span><span>3</span><span>,</span> <span>44</span><span>,</span> <span>38</span><span>,</span> <span>5</span><span>,</span> <span>47</span><span>,</span> <span>15</span><span>,</span> <span>36</span><span>,</span> <span>26</span><span>,</span> <span>27</span><span>,</span> <span>2</span><span>,</span> <span>46</span><span>,</span> <span>4</span><span>,</span> <span>19</span><span>,</span> <span>50</span><span>,</span> <span>48</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>mergeSort</span><span>(</span>mergeArr<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h2 id="快速排序" tabindex="-1"> 快速排序</h2>
<p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>
<p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
<ul>
<li>从数列中挑出一个元素，称为 &quot;基准&quot;（pivot）；</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ul>
<div><pre><code><span>function</span> <span>quickSort</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>arr<span>.</span>length <span>&lt;=</span> <span>1</span><span>)</span> <span>return</span> arr<span>;</span>
  <span>let</span> pivotIndex <span>=</span> Math<span>.</span><span>floor</span><span>(</span>arr<span>.</span>length <span>/</span> <span>2</span><span>)</span><span>;</span>
  <span>let</span> pivot <span>=</span> arr<span>.</span><span>splice</span><span>(</span>pivotIndex<span>,</span> <span>1</span><span>)</span><span>[</span><span>0</span><span>]</span><span>;</span>
  <span>let</span> left <span>=</span> <span>[</span><span>]</span><span>;</span>
  <span>let</span> right <span>=</span> <span>[</span><span>]</span><span>;</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> arr<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>arr<span>[</span>i<span>]</span> <span>&lt;</span> pivot<span>)</span> <span>{</span>
      left<span>.</span><span>push</span><span>(</span>arr<span>[</span>i<span>]</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      right<span>.</span><span>push</span><span>(</span>arr<span>[</span>i<span>]</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>quickSort</span><span>(</span>left<span>)</span><span>.</span><span>concat</span><span>(</span><span>[</span>pivot<span>]</span><span>,</span> <span>quickSort</span><span>(</span>right<span>)</span><span>)</span><span>;</span>
<span>}</span>
<span>let</span> quickArr <span>=</span> <span>[</span><span>3</span><span>,</span> <span>44</span><span>,</span> <span>38</span><span>,</span> <span>5</span><span>,</span> <span>47</span><span>,</span> <span>15</span><span>,</span> <span>36</span><span>,</span> <span>26</span><span>,</span> <span>27</span><span>,</span> <span>2</span><span>,</span> <span>46</span><span>,</span> <span>4</span><span>,</span> <span>19</span><span>,</span> <span>50</span><span>,</span> <span>48</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>quickSort</span><span>(</span>quickArr<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="堆排序" tabindex="-1"> 堆排序</h2>
<p>具体算法描述如下：</p>
<ul>
<li>将初始待排序关键字序列(R1,R2....Rn)构建成大顶堆，此堆为初始的无序区；</li>
<li>将堆顶元素 R[1]与最后一个元素 R[n]交换，此时得到新的无序区(R1,R2,......Rn-1)和新的有序区(Rn),且满足 R[1,2...n-1]&lt;=R[n]；</li>
<li>由于交换后新的堆顶 R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,......Rn-1)调整为新堆，然后再次将 R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2....Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为 n-1，则整个排序过程完成。</li>
</ul>
<div><pre><code><span>function</span> <span>heapify</span><span>(</span><span>arr<span>,</span> len<span>,</span> i</span><span>)</span> <span>{</span>
  <span>let</span> left <span>=</span> i <span>*</span> <span>2</span> <span>+</span> <span>1</span><span>,</span>
    right <span>=</span> i <span>*</span> <span>2</span> <span>+</span> <span>2</span><span>;</span>
  <span>let</span> max <span>=</span> i<span>;</span>
  <span>if</span> <span>(</span>left <span>&lt;</span> len <span>&amp;&amp;</span> arr<span>[</span>left<span>]</span> <span>></span> arr<span>[</span>max<span>]</span><span>)</span> <span>{</span>
    max <span>=</span> left<span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span>right <span>&lt;</span> len <span>&amp;&amp;</span> arr<span>[</span>right<span>]</span> <span>></span> arr<span>[</span>max<span>]</span><span>)</span> <span>{</span>
    max <span>=</span> right<span>;</span>
  <span>}</span>
  <span>if</span> <span>(</span>max <span>!=</span> i<span>)</span> <span>{</span>
    <span>let</span> tmp <span>=</span> arr<span>[</span>i<span>]</span><span>;</span>
    arr<span>[</span>i<span>]</span> <span>=</span> arr<span>[</span>max<span>]</span><span>;</span>
    arr<span>[</span>max<span>]</span> <span>=</span> tmp<span>;</span>
    <span>heapify</span><span>(</span>arr<span>,</span> len<span>,</span> max<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>function</span> <span>heapifySort</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> Math<span>.</span><span>floor</span><span>(</span>arr<span>.</span>length <span>/</span> <span>2</span><span>)</span> <span>-</span> <span>1</span><span>;</span> i <span>>=</span> <span>0</span><span>;</span> i<span>--</span><span>)</span> <span>{</span>
    <span>heapify</span><span>(</span>arr<span>,</span> arr<span>.</span>length<span>,</span> i<span>)</span><span>;</span>
  <span>}</span>
  <span>for</span> <span>(</span><span>let</span> j <span>=</span> arr<span>.</span>length <span>-</span> <span>1</span><span>;</span> j <span>></span> <span>0</span><span>;</span> j<span>--</span><span>)</span> <span>{</span>
    <span>let</span> tmp <span>=</span> arr<span>[</span><span>0</span><span>]</span><span>;</span>
    arr<span>[</span><span>0</span><span>]</span> <span>=</span> arr<span>[</span>j<span>]</span><span>;</span>
    arr<span>[</span>j<span>]</span> <span>=</span> tmp<span>;</span>
    <span>heapify</span><span>(</span>arr<span>,</span> j<span>,</span> <span>0</span><span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> arr<span>;</span>
<span>}</span>
<span>let</span> heapArr <span>=</span> <span>[</span><span>3</span><span>,</span> <span>44</span><span>,</span> <span>38</span><span>,</span> <span>5</span><span>,</span> <span>47</span><span>,</span> <span>15</span><span>,</span> <span>36</span><span>,</span> <span>26</span><span>,</span> <span>27</span><span>,</span> <span>2</span><span>,</span> <span>46</span><span>,</span> <span>4</span><span>,</span> <span>19</span><span>,</span> <span>50</span><span>,</span> <span>48</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>heapifySort</span><span>(</span>heapArr<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><h2 id="计数排序" tabindex="-1"> 计数排序</h2>
<p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<ul>
<li>找出待排序的数组中最大和最小的元素；</li>
<li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；</li>
<li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）；</li>
<li>反向填充目标数组：将每个元素 i 放在新数组的第 C(i)项，每放一个元素就将 C(i)减去 1。</li>
</ul>
<div><pre><code><span>function</span> <span>countingSort</span><span>(</span><span>arr</span><span>)</span> <span>{</span>
  <span>let</span> max <span>=</span> arr<span>[</span><span>0</span><span>]</span><span>;</span>
  <span>let</span> count <span>=</span> <span>[</span><span>]</span><span>;</span>
  <span>let</span> res <span>=</span> <span>[</span><span>]</span><span>;</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> arr<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    max <span>=</span> Math<span>.</span><span>max</span><span>(</span>max<span>,</span> arr<span>[</span>i<span>]</span><span>)</span><span>;</span>
    count<span>[</span>arr<span>[</span>i<span>]</span><span>]</span> <span>=</span> count<span>[</span>arr<span>[</span>i<span>]</span><span>]</span> <span>?</span> count<span>[</span>arr<span>[</span>i<span>]</span><span>]</span> <span>+</span> <span>1</span> <span>:</span> <span>1</span><span>;</span>
  <span>}</span>

  <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>1</span><span>;</span> j <span>&lt;</span> max <span>+</span> <span>1</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
    count<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> <span>(</span>count<span>[</span>j<span>]</span> <span>||</span> <span>0</span><span>)</span> <span>+</span> <span>(</span>count<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>||</span> <span>0</span><span>)</span><span>;</span>
  <span>}</span>

  <span>for</span> <span>(</span><span>let</span> k <span>=</span> <span>0</span><span>;</span> k <span>&lt;</span> arr<span>.</span>length<span>;</span> k<span>++</span><span>)</span> <span>{</span>
    res<span>[</span>count<span>[</span>arr<span>[</span>k<span>]</span><span>]</span> <span>-</span> <span>1</span><span>]</span> <span>=</span> arr<span>[</span>k<span>]</span><span>;</span>
    count<span>[</span>arr<span>[</span>k<span>]</span><span>]</span><span>--</span><span>;</span>
  <span>}</span>

  <span>return</span> res<span>;</span>
<span>}</span>
<span>let</span> countArr <span>=</span> <span>[</span><span>3</span><span>,</span> <span>44</span><span>,</span> <span>38</span><span>,</span> <span>5</span><span>,</span> <span>47</span><span>,</span> <span>15</span><span>,</span> <span>36</span><span>,</span> <span>26</span><span>,</span> <span>27</span><span>,</span> <span>2</span><span>,</span> <span>46</span><span>,</span> <span>4</span><span>,</span> <span>19</span><span>,</span> <span>50</span><span>,</span> <span>48</span><span>]</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>countingSort</span><span>(</span>countArr<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>观察者模式 vs 发布订阅模式</title>
      <link>https://avery-blog.vercel.app/willbe/designMode/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%20vs%20%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html</link>
      <guid>https://avery-blog.vercel.app/willbe/designMode/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%20vs%20%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">观察者模式 vs 发布订阅模式</source>
      <category>设计模式</category>
      <pubDate>Wed, 20 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="观察者模式-vs-发布订阅模式" tabindex="-1"> 观察者模式 vs 发布订阅模式</h1>
<h2 id="观察者模式" tabindex="-1"> 观察者模式</h2>
<p>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯。</p>
<p>观察者模式有一个别名叫“发布-订阅模式”，或者说是“订阅-发布模式”，订阅者和订阅目标是联系在一起的，当订阅目标发生改变时，逐个通知订阅者。我们可以用报纸期刊的订阅来形象的说明，当你订阅了一份报纸，每天都会有一份最新的报纸送到你手上，有多少人订阅报纸，报社就会发多少份报纸，报社和订报纸的客户就是上面文章开头所说的“一对多”的依赖关系。</p>
<p>观察者模式，其实是为了实现 <strong>松耦合(loosely coupled)</strong></p>
<p>在观察者模式里，如果我们想要调用一个方法，而不改变方法内部的代码，那我们用这调用方法的实例对象，就是被观察者(Subject或者 Observable)，只需要维护一套观察者(Observer)的集合，这些Observer实现相同的接口，Subject只需要知道，通知Observer时，需要调用哪个统一方法就好。</p>
<p><img src="@source/.vuepress/public/image/image-20220720170127932.png" alt="image-20220720170127932" loading="lazy"></p>
<h2 id="发布订阅模式" tabindex="-1"> 发布订阅模式</h2>
<p>其实24种基本的设计模式中并没有发布订阅模式，上面也说了，他只是观察者模式的一个别称。</p>
<p>但是经过时间的沉淀，似乎他已经强大了起来，已经独立于观察者模式，成为另外一种不同的设计模式。</p>
<p>在现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为调度中心或事件通道，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者。</p>
<p>举一个例子，你在微博上关注了A，同时其他很多人也关注了A，那么当A发布动态的时候，微博就会为你们推送这条动态。A就是发布者，你是订阅者，微博就是调度中心，你和A是没有直接的消息往来的，全是通过微博来协调的（你的关注，A的发布动态）。</p>
<p><strong>在发布订阅模式里，发布者，并不会直接通知订阅者，换句话说，发布者和订阅者，彼此互不相识。</strong></p>
<p>互不相识？那他们之间如何交流？</p>
<p><strong>答案是，通过第三者，也就是在消息队列里面，我们常说的经纪人Broker。</strong></p>
<p><img src="@source/.vuepress/public/image/image-20220720172321015.png" alt="image-20220720172321015" loading="lazy"></p>
<p>发布者只需告诉Broker，我要发的消息，topic是AAA；</p>
<p>订阅者只需告诉Broker，我要订阅topic是AAA的消息；</p>
<p>于是，当Broker收到发布者发过来消息，并且topic是AAA时，就会把消息推送给订阅了topic是AAA的订阅者。当然也有可能是订阅者自己过来拉取，看具体实现。</p>
<p><strong>也就是说，发布订阅模式里，发布者和订阅者，不是松耦合，而是完全解耦的。</strong></p>
<h2 id="总结" tabindex="-1"> 总结</h2>
<p>从表面上看：</p>
<ul>
<li>观察者模式里，只有两个角色 —— 观察者 + 被观察者</li>
<li>而发布订阅模式里，却不仅仅只有发布者和订阅者两个角色，还有一个经常被我们忽略的 —— 经纪人Broker</li>
</ul>
<p>往更深层次讲：</p>
<ul>
<li>观察者和被观察者，是松耦合的关系</li>
<li>发布者和订阅者，则完全不存在耦合</li>
</ul>
<p>从使用层面上讲：</p>
<ul>
<li>观察者模式，多用于单个应用内部</li>
<li>发布订阅模式，则更多的是一种跨应用的模式(cross-application pattern)，比如我们常用的消息中间件</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>webpack</title>
      <link>https://avery-blog.vercel.app/willbe/engineering/webpack.html</link>
      <guid>https://avery-blog.vercel.app/willbe/engineering/webpack.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">webpack</source>
      <category>前端工程化</category>
      <pubDate>Wed, 20 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="webpack" tabindex="-1"> webpack</h1>
<h2 id="optimization-优化" tabindex="-1"> optimization（优化）</h2>
<p>webpack的runtimeChunk怎么生成</p>
<p>将<code>optimization.runtimeChunk</code>设置为<code>true</code>或<code>multiple</code>，会为每个入口添加一个只含有runtime的额外chunk</p>
<p><strong>webpack.config.js</strong></p>
<div><pre><code>module.exports = {
  //...
  optimization: {
    runtimeChunk: {
      name: (entrypoint) => `runtime~${entrypoint.name}`,
    },
  },
};
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>值 <code>&quot;single&quot;</code> 会创建一个在所有生成 chunk 之间共享的运行时文件。此设置是如下设置的别名：</p>
<p><strong>webpack.config.js</strong></p>
<div><pre><code>module.exports = {
  //...
  optimization: {
    runtimeChunk: {
      name: 'runtime',
    },
  },
};
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>通过将 <code>optimization.runtimeChunk</code> 设置为 <code>object</code>，对象中可以设置只有 <code>name</code> 属性，其中属性值可以是名称或者返回名称的函数，用于为 runtime chunks 命名。</p>
<p>默认值是 <code>false</code>：每个入口 chunk 中直接嵌入 runtime。</p>
<h2 id="模块热替换-hot-module-replacement" tabindex="-1"> 模块热替换(hot module replacement)</h2>
<p>模块热替换(HMR - hot module replacement)功能会在应用程序运行过程中，替换、添加或删除 <a href="https://webpack.docschina.org/concepts/modules/" target="_blank" rel="noopener noreferrer">模块</a>，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p>
<ul>
<li>保留在完全重新加载页面期间丢失的应用程序状态。</li>
<li>只更新变更内容，以节省宝贵的开发时间。</li>
<li>在源代码中 CSS/JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。</li>
</ul>
<p>运行：</p>
<p>通过以下步骤，可以做到在应用程序中置换(swap in and out)模块：</p>
<ol>
<li>应用程序要求 HMR runtime 检查更新。</li>
<li>HMR runtime 异步地下载更新，然后通知应用程序。</li>
<li>应用程序要求 HMR runtime 应用更新。</li>
<li>HMR runtime 同步地应用更新。</li>
</ol>
<p>你可以设置 HMR，以使此进程自动触发更新，或者你可以选择要求在用户交互时进行更新。</p>
<h3 id="在-compiler-中" tabindex="-1"> 在 compiler 中</h3>
<p>除了普通资源，compiler 需要发出 &quot;update&quot;，将之前的版本更新到新的版本。&quot;update&quot; 由两部分组成：</p>
<ol>
<li>更新后的 <a href="https://webpack.docschina.org/concepts/manifest" target="_blank" rel="noopener noreferrer">manifest</a> (JSON)</li>
<li>一个或多个 updated chunk (JavaScript)</li>
</ol>
<p>manifest 包括新的 compilation hash 和所有的 updated chunk 列表。每个 chunk 都包含着全部更新模块的最新代码（或一个 flag 用于表明此模块需要被移除）。</p>
<p>compiler 会确保在这些构建之间的模块 ID 和 chunk ID 保持一致。通常将这些 ID 存储在内存中（例如，使用 <a href="https://webpack.docschina.org/configuration/dev-server/" target="_blank" rel="noopener noreferrer">webpack-dev-server</a> 时），但是也可能会将它们存储在一个 JSON 文件中。</p>
<h3 id="在模块中" tabindex="-1"> 在模块中</h3>
<p>HMR 是可选功能，只会影响包含 HMR 代码的模块。举个例子，通过 <a href="https://github.com/webpack-contrib/style-loader" target="_blank" rel="noopener noreferrer"><code>style-loader</code></a> 为 style 追加补丁。为了运行追加补丁，<code>style-loader</code> 实现了 HMR 接口；当它通过 HMR 接收到更新，它会使用新的样式替换旧的样式。</p>
<p>类似的，当在一个模块中实现了 HMR 接口，你可以描述出当模块被更新后发生了什么。然而在多数情况下，不需要在每个模块中强行写入 HMR 代码。如果一个模块没有 HMR 处理函数，更新就会冒泡(bubble up)。这意味着某个单独处理函数能够更新整个模块树。如果在模块树的一个单独模块被更新，那么整组依赖模块都会被重新加载。</p>
<h3 id="在-runtime-中" tabindex="-1"> 在 runtime 中</h3>
<p>对于模块系统运行时(module system runtime)，会发出额外代码，来跟踪模块 <code>parents</code> 和 <code>children</code> 关系。在管理方面，runtime 支持两个方法 <code>check</code> 和 <code>apply</code>。</p>
<p><code>check</code> 方法，发送一个 HTTP 请求来更新 manifest。如果请求失败，说明没有可用更新。如果请求成功，会将 updated chunk 列表与当前的 loaded chunk 列表进行比较。每个 loaded chunk 都会下载相应的 updated chunk。当所有更新 chunk 完成下载，runtime 就会切换到 <code>ready</code> 状态。</p>
<p><code>apply</code> 方法，将所有 updated module 标记为无效。对于每个无效 module，都需要在模块中有一个 update handler，或者在此模块的父级模块中有 update handler。否则，会进行无效标记冒泡，并且父级也会被标记为无效。继续每个冒泡，直到到达应用程序入口起点，或者到达带有 update handler 的 module（以最先到达为准，冒泡停止）。如果它从入口起点开始冒泡，则此过程失败。</p>
<p>之后，所有无效 module 都会被（通过 dispose handler）处理和解除加载。然后更新当前 hash，并且调用所有 <code>accept</code> handler。runtime 切换回 <code>idle</code> 状态，一切照常继续。</p>
<h3 id="hmr核心流程" tabindex="-1"> HMR核心流程</h3>
<ol>
<li>使用 webpack-dev-server (后面简称 WDS)托管静态资源，同时以 Runtime 方式注入 HMR 客户端代码；</li>
<li>浏览器加载页面后，与 WDS 建立 WebSocket 连接；</li>
<li>Webpack 监听到文件变化后，增量构建发生变更的模块，并通过 WebSocket 发送 hash 事件；</li>
<li>浏览器接收到 hash 事件后，请求 manifest 资源文件，确认增量变更范围；</li>
<li>浏览器加载发生变更的增量模块；</li>
<li>Webpack 运行时触发变更模块的 module.hot.accept 回调，执行代码变更逻</li>
<li>done；</li>
</ol>
<h3 id="hot-module-replacement-原理的关键部分" tabindex="-1"> Hot Module Replacement 原理的关键部分</h3>
<h4 id="_1-注入-hmr-客户端运行时" tabindex="-1"> 1.注入 HMR 客户端运行时</h4>
<ul>
<li>
<p>执行 npx webpack serve 命令后，WDS 调用 HotModuleReplacementPlugin 插件向应用的主 Chunk 注入一系列 HMR Runtime，包括：</p>
</li>
<li>
<p>用于建立 WebSocket 连接，处理 hash 等消息的运行时代码；</p>
</li>
<li>
<p>用于加载热更新资源的 RuntimeGlobals.hmrDownloadManifest 与 RuntimeGlobals.hmrDownloadUpdateHandlers 接口；</p>
</li>
<li>
<p>用于处理模块更新策略的 module.hot.accept 接口；</p>
</li>
</ul>
<p>经过 HotModuleReplacementPlugin 处理后，构建产物中即包含了所有运行 HMR 所需的客户端运行时与接口。这些 HMR 运行时会在浏览器执行一套基于 WebSocket 消息的时序框架，如图：</p>
<p><img src="@source/.vuepress/public/image/image-20220720162544854.png" alt="image-20220720162544854" loading="lazy"></p>
<h4 id="_2-增量构建" tabindex="-1"> 2.增量构建</h4>
<p>除注入客户端代码外，HotModuleReplacementPlugin 插件还会借助 Webpack 的 watch 能力，在代码文件发生变化后执行增量构建，生成：</p>
<ul>
<li>
<p>manifest 文件：JSON 格式文件，包含所有发生变更的模块列表，命名为 [hash].hot-update.json；</p>
</li>
<li>
<p>模块变更文件：js 格式，包含编译后的模块代码，命名为 [hash].hot-update.js；</p>
</li>
<li>
<p>增量构建完毕后，Webpack 将触发 compilation.hooks.done 钩子，并传递本次构建的统计信息对象 stats。WDS 则监听 done 钩子，在回调中通过 WebSocket 发送模块更新消息：</p>
<p>{&quot;type&quot;:&quot;hash&quot;,&quot;data&quot;:&quot;${stats.hash}&quot;}实际效果：
<img src="@source/.vuepress/public/image/image-20220720162734218.png" alt="image-20220720162734218" loading="lazy"></p>
</li>
</ul>
<p>注意，在 Webpack 4 及之前，热更新文件以模块为单位，即所有发生变化的模块都会生成对应的热更新文件； Webpack 5 之后热更新文件以 chunk 为单位，如上例中，main chunk 下任意文件的变化都只会生成 main.[hash].hot-update.js 更新文件。
manifest 请求完成后，客户端 HMR 运行时开始下载发生变化的 chunk 文件，将最新模块代码加载到本地。</p>
<h4 id="_3-module-hot-accept回调" tabindex="-1"> 3.module.hot.accept回调</h4>
<p>经过上述步骤，浏览器加载完最新模块代码后，HMR 运行时会继续触发 module.hot.accept 回调，将最新代码替换到运行环境中。</p>
<p>module.hot.accept 是 HMR 运行时暴露给用户代码的重要接口之一，它在 Webpack HMR 体系中开了一个口子，让用户能够自定义模块热替换的逻辑。module.hot.accept 接口签名如下：</p>
<p>module.hot.accept(path?: string, callback?: function);它接受两个参数：</p>
<p>path：指定需要拦截变更行为的模块路径
callback：模块更新后，将最新模块代码应用到运行环境的函数例如，对于如下代码：</p>
<div><pre><code>
// src/bar.jsexport const bar = 'bar'
// src/index.js
 
import { bar } from './bar';
const node = document.createElement('div')
node.innerText = bar;
document.body.appendChild(node)
module.hot.accept('./bar.js', function () { node.innerText = bar;})

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>示例中，module.hot.accept 函数监听 ./bar.js 模块的变更事件，一旦代码发生变动就触发回调，将 ./bar.js 导出的值应用到页面上，从而实现热更新效果。</p>
<h5 id="_4-1失败兜底" tabindex="-1"> 4.1失败兜底</h5>
<p>module.hot.accept 函数只接受具体路径的 path 参数，也就是说我们无法通过 glob 或类似风格的方式批量注册热更新回调。</p>
<p>一旦某个模块没有注册对应的 module.hot.accept 函数后，HMR 运行时会执行兜底策略，通常是刷新页面，确保页面上运行的始终是最新的代码。</p>
<h5 id="_4-2更新事件冒泡" tabindex="-1"> 4.2更新事件冒泡</h5>
<p>在 Webpack HMR 框架中，module.hot.accept 函数只能捕获当前模块对应子孙模块的更新事件</p>
<p><img src="@source/.vuepress/public/image/image-20220720163135760.png" alt="image-20220720163135760" loading="lazy"></p>
<p>示例中，更新事件会沿着模块依赖树自底向上逐级传递，从 foo 到 index ，从 bar-1 到 bar 再到 index，但不支持反向或跨子树传递，也就是说：</p>
<p>在 foo.js 中无法捕获 bar.js 及其子模块的变更事件；
在 bar-1.js 中无法捕获 bar.js 的变更事件
这一特性与 DOM 事件规范中的冒泡过程极为相似，使用时如果摸不准模块的依赖关系，建议直接在应用的入口文件中编写热更新函数。</p>
<h5 id="_4-3无参数调用" tabindex="-1"> 4.3无参数调用</h5>
<p>除上述调用方式外，module.hot.accept 函数还支持无参数调用风格，作用是捕获当前文件的变更事件，并从模块第一行开始重新运行该模块的代码，例如：</p>
<p>// src/bar.jsconsole.log('bar');module.hot.accept();示例模块发生变动之后，会从头开始重复执行 console.log 语句。</p>
]]></content:encoded>
    </item>
    <item>
      <title>CommonJS 与 ES Module 的区别</title>
      <link>https://avery-blog.vercel.app/willbe/JavaScript/CommonJS%E4%B8%8EESModule%E7%9A%84%E5%8C%BA%E5%88%AB.html</link>
      <guid>https://avery-blog.vercel.app/willbe/JavaScript/CommonJS%E4%B8%8EESModule%E7%9A%84%E5%8C%BA%E5%88%AB.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">CommonJS 与 ES Module 的区别</source>
      <category>JavaScript</category>
      <pubDate>Mon, 25 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="commonjs-与-es-module-的区别" tabindex="-1"> CommonJS 与 ES Module 的区别</h1>
<p>我们都知道 CommonJS 与 ES Module 是前端中最常使用的模块化规范</p>
<p>Common JS 是针对服务端的 js，也就是 node.js ESM 是针对浏览器的</p>
<h2 id="commonjs" tabindex="-1"> CommonJS</h2>
<h3 id="基本使用" tabindex="-1"> 基本使用</h3>
<div><pre><code><span>// index.js 导入</span>
<span>const</span> a <span>=</span> <span>require</span><span>(</span><span>"./a.js"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>"运行入口模块"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>a<span>)</span><span>;</span>

<span>// a.js 导出</span>
exports<span>.</span>a <span>=</span> <span>"a模块"</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>"运行a模块"</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>我们使用<code>require</code>函数作模块的引入，使用<code>exports</code>对象来做模块的导出，这里的<code>require</code> <code>exports</code>正是 CommmonJS 规范提供给我们的，使用断点调试，可以看到这几个核心变量：</p>
<ol>
<li>exports 记录当前模块导出的变量</li>
<li>module 记录当前模块的详细信息</li>
<li>require 进行模块的导入</li>
</ol>
<h4 id="exports-导出与-module-exports-的区别" tabindex="-1"> exports 导出与 module.exports 的区别</h4>
<p>虽然他们都指向的是同一块内存，但是使用并不等价</p>
<ol>
<li>
<p>当帮 i 的那个一个属性时，两者相同</p>
<div><pre><code>exports.a='a'
module.exports.b='b'
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>不能直接赋值给 exports，也就是不能直接使用 exports={}这种语法</p>
<div><pre><code>// 失败
exports = {propA:'A'};
// 成功
module.exports = {propB:'B'};
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>虽然两者指向同一块内存，但最后被导出的是 module.exports，所以不能直接赋值给 exports。</p>
<p>同样的道理，只要最后直接给 module.exports 赋值了，之前绑定的属性都会被覆盖掉。</p>
<div><pre><code>exports.propA = 'A';
module.exports.propB = 'B';
module.exports = {propC:'C'};
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>用上面的例子所示，先是绑定了两个属性 propA 和 propB，接着给 module.exports 赋值，最后能成功导出的只有 propC。</p>
</li>
</ol>
<h4 id="require-导入" tabindex="-1"> require 导入</h4>
<p>CommonJS 的引入特点是值的拷贝，简单来说就是把导出值复制一份，放到一块新的内存中。</p>
<h2 id="es-module" tabindex="-1"> ES Module</h2>
<p>ES Module 使用 import 命令来做导入，使用 export 来做导出</p>
<ol>
<li>
<p>普通导入、导出</p>
<div><pre><code>// index.mjs
import {propA, propB,propC, propD} from './a.mjs'

// a.mjs
const propA = 'a';
let propB = () => {console.log('b')};
var propC = 'c';

export { propA, propB, propC };
export const propD = 'd'
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>使用 export 导出可以写成一个对象合集，也可以是一个单独的变量，需要和 import 导入的变量名字一一对应</p>
</li>
<li>
<p>默认导入、导出</p>
<div><pre><code>// 导入函数
import anyName from './a.mjs'
export default function () {
    console.log(123)
}

// 导入对象
import anyName from './a.mjs'
export default {
  name:'niannian';
  location:'guangdong'
}

// 导入常量
import anyName from './a.mjs'
export default 1
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>使用 export default 语法可以实现默认导出，可以是一个函数、一个对象，或者仅一个常量。默认的意思是，使用 import 导入时可以使用任意名称，</p>
</li>
<li>
<p>混合导入、导出</p>
<div><pre><code>// index.mjs
import anyName, { propA, propB, propC, propD } from './a.mjs'
console.log(anyName,propA,propB,propC,propD)

// a.mjs
const propA = 'a';
let propB = () => {console.log('b')};
var propC = 'c';
// 普通导出
export { propA, propB, propC };
export const propD = 'd'
// 默认导出
export default function sayHello() {
    console.log('hello')
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
<li>
<p>全部导入</p>
<div><pre><code>// index.mjs
import * as resName from './a.mjs'
console.log(resName)

// a.mjs
const propA = 'a';
let propB = () => {console.log('b')};
var propC = 'c';
// 普通导出
export { propA, propB, propC };
export const propD = 'd'
// 默认导出
export default function sayHello() {
    console.log('hello')
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
<li>
<p>重命名导入</p>
<div><pre><code>// index.mjs
import {  propA  as renameA,   propB as renameB, propC as renameC , propD as renameD } from './a.mjs'
const propA = 'a';
let propB = () => {console.log('b')};
var propC = 'c';

// a.mjs
export { propA, propB, propC };
export const propD = 'd'
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p>重定向导出</p>
<div><pre><code>export * from './a.mjs' // 第一种
export { propA, propB, propC } from './a.mjs' // 第二种
export { propA as renameA, propB as renameB, propC as renameC } from './a.mjs' //第三种
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ol>
<p>那他们的区别在哪呢：</p>
<h2 id="区别" tabindex="-1"> 区别</h2>
<ol>
<li>
<p>两者的模块导入导出语法不同：CommonJS 是 module.exports,exports 导出，require 导入；而 ESM 是 export 导出，import 导入。</p>
</li>
<li>
<p>CommonJS 是运行时加载模块，ESM 在静态编译期间就确定模块依赖</p>
</li>
<li>
<p>ESM 在编译期间会将 import 语句提升到顶部，CommonJS 不会提升 require</p>
</li>
<li>
<p>CommonJS 导出的是值的拷贝，会对加载结果进行缓存，一旦内部再修改这个值，则不会同步到外部。（CommonJS 不会循环引用就是因为这个特性）而 ESM 是值的引用，内部的修改可以同步到外部。</p>
</li>
<li>
<p>两者的循环导入的实现原理不同，CommonJS 是当模块遇到循环加载时，返回的是当前已经执行的部分值，而不是代码全部执行后的值，两者会有差异，所以，输入变量时，必须非常小心，ESM 是动态引用，如果使用 import 从一个模块加载变量（即 <code>import foo from 'foo'</code>），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</p>
</li>
<li>
<p>CommonJS 中顶层的 this 指向模块本身，而 ESM 顶层 this 指向 undefined</p>
</li>
<li>
<p>CommonJS 是单个值导出，ESM 可以导出多个</p>
</li>
<li>
<p>CommonJS 中的一些顶层变量在 ESM 中不存在如 <code>arguments</code> <code>require</code> <code>module</code> <code>exports</code> <code>_filename</code></p>
</li>
</ol>
<h2 id="commonjs-和-es-module-模块循环依赖为什么不会导致死循环-它们的解决方法有什么不同" tabindex="-1"> CommonJS 和 ES Module 模块循环依赖为什么不会导致死循环，它们的解决方法有什么不同</h2>
<h3 id="commonjs-的循环引用" tabindex="-1"> CommonJS 的循环引用</h3>
<div><pre><code>//index.js
var a = require('./a')
console.log('入口模块引用a模块：',a)

// a.js
exports.a = '原始值-a模块内变量'
var b = require('./b')
console.log('a模块引用b模块：',b)
exports.a = '修改值-a模块内变量'

// b.js
exports.b ='原始值-b模块内变量'
var a = require('./a')
console.log('b模块引用a模块',a)
exports.b = '修改值-b模块内变量'
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>结果如下：</p>
<p><img src="@source/.vuepress/public/image/image-20220722182616617.png" alt="image-20220722182616617" loading="lazy"></p>
<p>依旧使用断点调试，可以看到变量 require 上有一个属性<code>cache</code>，这就是模块缓存</p>
<p>一行行来看执行过程，</p>
<ol>
<li>【入口模块】开始执行，把入口模块加入缓存，</li>
<li>var a = require('./a') 执行 将 a 模块加入缓存，进入 a 模块，</li>
<li>【a 模块】exports.a = '原始值-a 模块内变量'执行，a 模块的缓存中给变量 a 初始化，为原始值，</li>
<li>执行 var b = require('./b')，将 b 模块加入缓存，进入 b 模块</li>
<li>【b 模块】exports.b ='原始值-b 模块内变量'，b 模块的缓存中给变量 b 初始化，为原始值，</li>
<li>var a = require('./a')，尝试导入 a 模块，发现已有 a 模块的缓存，所以不会进入执行，而是直接取 a 模块的缓存，此时打印<code>{ a: '原始值-a模块内变量' }</code>,</li>
<li>exports.b = '修改值-b 模块内变量 执行，将 b 模块的缓存中变量 b 替换成修改值，</li>
<li>【a 模块】console.log('a 模块引用 b 模块：',b) 执行，取缓存中的值，打印<code>{ b: '修改值-b模块内变量' }</code></li>
<li>exports.a = '修改值-a 模块内变量' 执行，将 a 模块缓存中的变量 a 替换成修改值，</li>
<li>【入口模块】console.log('入口模块引用 a 模块：',a) 执行，取缓存中的值，打印<code>{ a: '修改值-a模块内变量' }</code></li>
</ol>
<p>上面就是对循环引用的处理过程，循环引用无非是要解决两个问题，怎么避免死循环以及输出的值是什么。CommonJS 通过模块缓存来解决：每一个模块都先加入缓存再执行，每次遇到 require 都先检查缓存，这样就不会出现死循环；借助缓存，输出的值也很简单就能找到了。</p>
<h4 id="多次引入" tabindex="-1"> <strong>多次引入</strong></h4>
<p>同样由于缓存，一个模块不会被多次执行，来看下面这个例子：入口模块引用了 a、b 两个模块，a、b 这两个模块又分别引用了 c 模块，此时并不存在循环引用，但是 c 模块被引用了两次。</p>
<div><pre><code>//index.js
var a = require('./a')
var b= require('./b')

// a.js
module.exports.a = '原始值-a模块内变量'
console.log('a模块执行')
var c = require('./c')

// b.js
module.exports.b = '原始值-b模块内变量'
console.log('b模块执行')
var c = require('./c')

// c.js
module.exports.c = '原始值-c模块内变量'
console.log('c模块执行')
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>结果如下：</p>
<p>a 模块执行</p>
<p>c 模块执行</p>
<p>b 模块执行</p>
<p>可以看到，c 模块只被执行了一次，当第二次引用 c 模块时，发现已经有缓存，则直接读取，而不会再去执行一次</p>
<h4 id="路径解析规则" tabindex="-1"> <strong>路径解析规则</strong></h4>
<p>路径解析规则也是面试常考的一个点，或者说，为什么我们导入时直接简单写一个'react'就正确找到包的位置。</p>
<p>仔细观察 module 这个变量，可以看到还有一个属性<code>paths</code></p>
<p>先把路径作一个简单分类：内置的核心模块、本地的文件模块和第三方模块。</p>
<ol>
<li>对于核心模块，node 将其已经编译成二进制代码，直接书写标识符 fs、http 就可以</li>
<li>对于自己写的文件模块，需要用‘./’'../'开头，require 会将这种相对路径转化为真实路径，找到模块</li>
<li>对于第三方模块，也就是使用 npm 下载的包，就会用到<code>paths</code>这个变量，会依次查找当前路径下的 node_modules 文件夹，如果没有，则在父级目录查找 no_modules，一直到根目录下，找到为止。</li>
</ol>
<p>在 node_modules 下找到对应包后，会以 package.json 文件下的 main 字段为准，找到包的入口，如果没有 main 字段，则查找 index.js/index.json/index.node</p>
<h3 id="esm" tabindex="-1"> ESM</h3>
<p>ES module 导出的是一个索引——内存地址，没有办法这样处理。它依赖的是“模块地图”和“模块记录”，模块地图在下面会解释，而模块记录是好比每个模块的“身份证”，记录着一些关键信息——这个模块导出值的的内存地址，加载状态，在其他模块导入时，会做一个“连接”——根据模块记录，把导入的变量指向同一块内存，这样就是实现了动态绑定，</p>
<div><pre><code>// index.mjs
import * as a from './a.js'
console.log('入口模块引用a模块：', a)

// a.mjs
let a = "原始值-a模块内变量"
export { a }
import * as b from "./b.js"
console.log("a模块引用b模块：", b)
a = "修改值-a模块内变量"

// b.mjs
let b = "原始值-b模块内变量"
export { b }
import * as a from "./a.js"
console.log("b模块引用a模块：", a)
b = "修改值-b模块内变量"
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>浏览器的执行结果：</p>
<p><img src="@source/.vuepress/public/image/image-20220722183955761.png" alt="image-20220722183955761" loading="lazy"></p>
<p>Node 的执行结果</p>
<p><img src="@source/.vuepress/public/image/image-20220722191752225.png" alt="image-20220722191752225" loading="lazy"></p>
<p>在浏览器中：</p>
<p>ES6 在浏览器中要在<code>&lt;script type=&quot;module&quot; src=&quot;./index.mjs&quot; &gt;&lt;/script&gt;</code>加上 type=&quot;module&quot;，但是加上之后就有一个默认条件就是它会按照 defer 的顺序执行</p>
<p>在 Node 中：</p>
<p>可以看到，在 b 模块中引用 a 模块时，得到的值是 undefined，接下来一步步分析代码的执行。</p>
<p>在代码执行前，首先要进行预处理，这一步会根据 import 和 export 来构建模块地图（Module Map），它类似于一颗树，树中的每一个“节点”就是一个模块记录，这个记录上会标注导出变量的内存地址，将导入的变量和导出的变量连接，即把他们指向同一块内存地址。不过此时这些内存都是空的，也就是看到的 undefined。</p>
<p>接下来就是代码的一行行执行，import 和 export 语句都是只能放在代码的顶层，也就是说不能写在函数或者 if 代码块中。</p>
<ol>
<li>【入口模块】首先进入入口模块，在模块地图中把入口模块的模块记录标记为“获取中”（Fetching），表示已经进入，但没执行完毕，</li>
<li>import * as a from './a.mjs' 执行，进入 a 模块，此时模块地图中 a 的模块记录标记为“获取中”</li>
<li>【a 模块】import * as b from './b.mjs' 执行，进入 b 模块，此时模块地图中 b 的模块记录标记为“获取中”，</li>
<li>【b 模块】import * as a from './a.mjs' 执行，检查模块地图，模块 a 已经是 Fetching 态，不再进去，</li>
<li>let b = '原始值-b 模块内变量' 模块记录中，存储 b 的内存块初始化，</li>
<li>console.log('b 模块引用 a 模块：', a) 根据模块记录到指向的内存中取值，是{ a: }</li>
<li>b = '修改值-b 模块内变量' 模块记录中，存储 b 的内存块值修改</li>
<li>【a 模块】let a = '原始值-a 模块内变量' 模块记录中，存储 a 的内存块初始化，</li>
<li>console.log('a 模块引用 b 模块：', b) 根据模块记录到指向的内存中取值，是{ b: '修改值-b 模块内变量' }</li>
<li>a = '修改值-a 模块内变量' 模块记录中，存储 a 的内存块值修改</li>
<li>【入口模块】console.log('入口模块引用 a 模块：',a) 根据模块记录，到指向的内存中取值，是{ a: '修改值-a 模块内变量' }</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>setTimeout和setInterval的区别</title>
      <link>https://avery-blog.vercel.app/willbe/JavaScript/setTimeout%E5%92%8CsetInterval%E7%9A%84%E5%8C%BA%E5%88%AB.html</link>
      <guid>https://avery-blog.vercel.app/willbe/JavaScript/setTimeout%E5%92%8CsetInterval%E7%9A%84%E5%8C%BA%E5%88%AB.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">setTimeout和setInterval的区别</source>
      <category>JavaScript</category>
      <pubDate>Mon, 25 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="settimeout和setinterval的区别" tabindex="-1"> setTimeout和setInterval的区别</h1>
<h2 id="settimeout-定义和用法" tabindex="-1"> setTimeout()定义和用法</h2>
<p>setTimeout() 方法用于在指定的毫秒数后调用函数或计算<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">表达式</a>。</p>
<p>setTimeout 方法接收两个参数，第一个参数为回调函数函数或<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener noreferrer">字符串</a>，第二个参数为触发时间(单位：毫秒)。</p>
<div><pre><code><span>setTimeout</span><span>(</span>code<span>,</span> milliseconds<span>,</span> param1<span>,</span> param2<span>,</span> <span>...</span><span>)</span>
 
<span>setTimeout</span><span>(</span><span>function</span><span>,</span> milliseconds<span>,</span> param1<span>,</span> param2<span>,</span> <span>...</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>code</td>
<td><strong>必需</strong>    要调用的函数后要执行的 JavaScript 代码串。</td>
</tr>
<tr>
<td>millisec</td>
<td>可选    执行或调用 code/function 需要等待的时间，以毫秒计。默认为 0。</td>
</tr>
<tr>
<td>param1, param2, ...</td>
<td>可选    传给执行函数的其他参数（IE9 及其更早版本不支持该参数）</td>
</tr>
</tbody>
</table>
<p><strong>setTimeout只在指定时间后执行一次，代码如下：</strong></p>
<div><pre><code>
<span>&lt;</span>script<span>></span>
    <span>//定时器 异步运行</span>
    <span>function</span> <span>hello</span><span>(</span><span>)</span><span>{</span>
        <span>alert</span><span>(</span><span>"hello world"</span><span>)</span><span>;</span>
    <span>}</span>
    <span>var</span> t1 <span>=</span> window<span>.</span><span>setTimeout</span><span>(</span>hello<span>,</span><span>1000</span><span>)</span><span>;</span><span>//使用方法名字执行方法</span>
    <span>var</span> t2 <span>=</span> window<span>.</span><span>setTimeout</span><span>(</span><span>"hello()"</span><span>,</span><span>3000</span><span>)</span><span>;</span><span>//使用字符串执行方法</span>
    <span>var</span> t3 <span>=</span> window<span>.</span><span>setTimeout</span><span>(</span><span>"alert('三秒钟已到')"</span><span>,</span> <span>3000</span> <span>)</span>
    window<span>.</span><span>clearTimeout</span><span>(</span>t1<span>)</span><span>;</span><span>//去掉定时器</span>
<span>&lt;</span><span>/</span>script<span>></span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="setinterval-定义和用法" tabindex="-1"> setInterval()定义和用法</h2>
<p>setInterval() 方法可按照指定的周期(以毫秒计)来调用函数或计算表达式。</p>
<p>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>code</td>
<td><strong>必需</strong>    要调用的函数或要执行的代码串。</td>
</tr>
<tr>
<td>millisec</td>
<td><strong>必需</strong>    周期性执行或调用 code 之间的时间间隔，以毫秒计。</td>
</tr>
</tbody>
</table>
<div><pre><code><span>//实时刷新时间单位为毫秒</span>
<span>setInterval</span><span>(</span><span>'fresh()'</span><span>,</span><span>8000</span><span>)</span><span>;</span> 
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h2 id="销毁两种定时器方法" tabindex="-1"> 销毁两种定时器方法：</h2>
<div><pre><code><span>//清除Timeout的定时器,</span>
<span>传入id</span><span>(</span>创建定时器时会返回一个id<span>)</span> <span>clearTimeout</span><span>(</span>i<span>)</span><span>;</span>
 
<span>//清除Interval的定时器,</span>
<span>传入id</span><span>(</span>创建定时器时会返回一个id<span>)</span> <span>clearInterval</span><span>(</span>j<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="settimeout和setinterval区别" tabindex="-1"> settimeout和setinterval区别</h2>
<ol>
<li>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式,而setInterval()则可以在每隔指定的毫秒数循环调用函数或表达式，直到clearInterval把它清除。</li>
<li>也就是说setTimeout()只执行一次，setInterval()可以执行多次。</li>
<li>两个函数的参数也相同，第一个参数是要执行的code或句柄，第二个是延迟的毫秒数。</li>
</ol>
<h2 id="动画requestanimationframe" tabindex="-1"> 动画requestAnimationFrame</h2>
<p>requestAnimationFrame()的作用就是代替定时器做更加流畅高性能的动画，做可以匹配设备刷新率的动画，解决了定时器做动画间隔不稳定的问题</p>
<p>与setTimeout一样的是都会返回一个唯一标识，setTimeout可以通过clearTImeout()关闭定时器。那么requestAnimationFrame使用的就是<code>cancelAnimationFrame()</code>关闭动画。</p>
<div><pre><code><span>const</span> box <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>'.box'</span><span>)</span><span>;</span>
<span>let</span> move<span>;</span>
<span>let</span> timer <span>=</span> <span>requestAnimationFrame</span><span>(</span><span>function</span> <span>fn</span><span>(</span><span>)</span> <span>{</span>
	move <span>=</span> <span>parseInt</span><span>(</span><span>getComputedStyle</span><span>(</span>box<span>)</span><span>.</span>left<span>)</span><span>;</span>
	<span>if</span> <span>(</span>move <span>&lt;</span> <span>800</span><span>)</span> <span>{</span>
		box<span>.</span>style<span>.</span>left <span>=</span> move <span>+</span> <span>8</span> <span>+</span> <span>'px'</span><span>;</span>
		<span>requestAnimationFrame</span><span>(</span>fn<span>)</span><span>;</span>
	<span>}</span> <span>else</span> <span>{</span>
		<span>cancelAnimationFrame</span><span>(</span>timer<span>)</span><span>;</span>
	<span>}</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="总结" tabindex="-1"> 总结：</h3>
<ul>
<li>requestAnimationFrame() 可以自动匹配设备帧率来展示动画（120帧就每秒执行120次）。</li>
<li>高性能且不会出现动画卡顿</li>
<li>会有游览器兼容问题</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>同步与异步</title>
      <link>https://avery-blog.vercel.app/willbe/JavaScript/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5.html</link>
      <guid>https://avery-blog.vercel.app/willbe/JavaScript/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">同步与异步</source>
      <category>JavaScript</category>
      <pubDate>Mon, 25 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="同步与异步" tabindex="-1"> 同步与异步</h1>
<h2 id="异步" tabindex="-1"> 异步</h2>
<p>异步编程的几种方法</p>
<ol>
<li>
<p>回调函数</p>
<div><pre><code><span>function</span> <span>f1</span><span>(</span><span><span>callback</span><span>(</span><span>)</span></span><span>)</span><span>{</span>
    <span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span><span>{</span>
        <span>callback</span><span>(</span><span>)</span>
    <span>}</span><span>,</span><span>1000</span><span>)</span>
<span>}</span>

<span>f1</span><span>(</span>f2<span>)</span>
<span>f3</span><span>(</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>则f3()先执行，不会受到 f1和f2的影响，那如果没有setTimeout还是异步的吗，答案是，不是。我们利用setTimeout才能做出回调函数</p>
</li>
<li>
<p>事件监听</p>
<p>像onclick事件等事件都是异步事件，addEventListener也是</p>
<div><pre><code><span>&lt;</span>div id<span>=</span><span>"id1"</span><span>></span>
    <span>&lt;</span>div id<span>=</span><span>"id2"</span><span>></span><span>&lt;</span><span>/</span>div<span>></span>
<span>&lt;</span><span>/</span>div<span>></span>
document<span>.</span><span>getElementById</span><span>(</span><span>'id1'</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span><span>fn</span><span>(</span><span>)</span><span>,</span><span>false</span><span>)</span>
document<span>.</span><span>getElementById</span><span>(</span><span>'id2'</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span><span>fn</span><span>(</span><span>)</span><span>,</span><span>false</span><span>)</span>
当第三个参数为<span>false</span>时，点击id<span>=</span>id2的div时，先输出id2<span>,</span>在输出id1
当为<span>true</span>时，顺序执行

element<span>.</span><span>onclick</span><span>=</span><span>function</span><span>(</span><span>)</span><span>{</span>
   <span>//处理函数</span>
<span>}</span>


</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>
<li>
<p>发布订阅</p>
<div><pre><code><span>class</span> <span>Publisher</span> <span>{</span>
    <span>constructor</span><span>(</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>subList <span>=</span> <span>[</span><span>]</span>
        <span>this</span><span>.</span>id <span>=</span> <span>0</span>
    <span>}</span>

    <span>publish</span><span>(</span><span>msg</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>subList<span>.</span><span>forEach</span><span>(</span><span>item</span> <span>=></span> <span>{</span>
            item<span>.</span><span>cb</span><span>(</span>msg<span>)</span>
        <span>}</span><span>)</span>
    <span>}</span>

    <span>// 取消订阅</span>
    <span>unSubscribe</span><span>(</span><span>phoneNumber</span><span>)</span> <span>{</span>
        <span>const</span> index <span>=</span> <span>this</span><span>.</span>subList<span>.</span><span>findIndex</span><span>(</span><span>item</span> <span>=></span> item<span>.</span>phoneNumber <span>===</span> phoneNumber<span>)</span>
        <span>this</span><span>.</span>subList<span>.</span><span>splice</span><span>(</span>index<span>,</span> <span>1</span><span>)</span>
    <span>}</span>

    <span>// 以电话号码作为订阅的标识</span>
    <span>subscribe</span><span>(</span><span>phoneNumber<span>,</span>cb</span><span>)</span> <span>{</span>
        <span>const</span> id <span>=</span> <span>(</span><span>this</span><span>.</span>id<span>++</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span>
        <span>this</span><span>.</span>subList<span>.</span><span>push</span><span>(</span><span>{</span>
            phoneNumber<span>,</span>
            cb<span>,</span>
            id
        <span>}</span><span>)</span>
    <span>}</span>

    <span>getSubscriberList</span><span>(</span><span>)</span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>subList<span>)</span>
    <span>}</span>
<span>}</span>

<span>const</span> publisher <span>=</span> <span>new</span> <span>Publisher</span><span>(</span><span>)</span>

publisher<span>.</span><span>subscribe</span><span>(</span><span>12345678</span> <span>,</span><span>function</span> <span>(</span><span>msg</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'第一个订阅者收到了消息：'</span> <span>+</span> msg<span>)</span>
<span>}</span><span>)</span>

<span>let</span> i <span>=</span> <span>1</span>

<span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    publisher<span>.</span><span>publish</span><span>(</span>i<span>++</span><span>)</span>
    publisher<span>.</span><span>getSubscriberList</span><span>(</span><span>)</span>
<span>}</span><span>,</span> <span>1000</span><span>)</span>

<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    publisher<span>.</span><span>subscribe</span><span>(</span><span>999888</span><span>,</span> <span>function</span> <span>(</span><span>msg</span><span>)</span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span><span>'第二个订阅者收到：'</span> <span>+</span> msg<span>)</span>
    <span>}</span><span>)</span>
<span>}</span><span>,</span> <span>1000</span> <span>*</span> <span>5</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div></li>
<li>
<p>promise</p>
</li>
<li>
<p>generator</p>
<p>Generator函数是协程在ES6中的实现，<strong>最大特点就是可以交出函数的执行权（即暂停执行）。</strong></p>
<p>上面代码的函数asyncJob是一个协程，<strong>奥妙就在于yield命令，</strong> 它表示执行到此处，<strong>执行权交给其他协程</strong>，也就是说<strong>yield命令是异步两个阶段的分界线。</strong></p>
<p>协程遇到yield命令就暂停，等到执行权返回，再从暂停的地方继续向后执行，它的最大优点就是<strong>代码的写法非常像同步操作</strong>，如果去除yield命令，简直是一模一样。</p>
<div><pre><code><span>function</span><span>*</span> <span>gen</span><span>(</span><span>x</span><span>)</span> <span>{</span>

  <span>var</span> y <span>=</span> <span>yield</span> x <span>+</span> <span>2</span><span>;</span>

  <span>return</span> y<span>;</span>

<span>}</span>

 

<span>var</span> g <span>=</span> <span>gen</span><span>(</span><span>1</span><span>)</span><span>;</span>

g<span>.</span><span>next</span><span>(</span><span>)</span> <span>// { value: 3, done: false }</span>

g<span>.</span><span>next</span><span>(</span><span>)</span> <span>// { value: undefined, done: true }</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p><strong>每当调用生成器对象的next的方法时，就会运行到下一个yield表达式。 之所以称这里的gen（）为生成器函数，是因为区别如下：</strong></p>
<ul>
<li><strong>普通函数使用function来声明，而生成器函数使用 function * 来声明</strong>。</li>
<li><strong>普通函数使用return来返回值，而生成器函数使用yield来返回值。</strong></li>
<li><strong>普通函数式run to completion模式 ，即一直运行到末尾； 而生成器函数式 run-pause-run 模式， 函数可以在执行过程中暂停一次或者多次。并且暂停期间允许其他代码执行。</strong></li>
</ul>
</li>
<li>
<p>async/await</p>
<div><pre><code><span>async</span> <span>function</span> <span>fn1</span><span>(</span><span>)</span><span>{</span>
	<span>await</span> <span>step1</span><span>(</span>time<span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>手写题</title>
      <link>https://avery-blog.vercel.app/willbe/JavaScript/%E6%89%8B%E5%86%99%E9%A2%98.html</link>
      <guid>https://avery-blog.vercel.app/willbe/JavaScript/%E6%89%8B%E5%86%99%E9%A2%98.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">手写题</source>
      <category>JavaScript</category>
      <pubDate>Thu, 28 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="手写题" tabindex="-1"> 手写题</h1>
<h2 id="手写promise" tabindex="-1"> 手写Promise</h2>
<p>手写promise的过程</p>
<ol>
<li>当我们new Promise时需要传入一个executor执行器，执行器可以立即执行</li>
<li>executor接收两个参数 resolve 和 reject</li>
<li>promise的状态只能从pending到resolve或者到reject</li>
<li>promise的状态一旦改变将不能再改变</li>
<li>promise都有then方法，then接收两个参数，分别是promise的成功回调onFulfilled和promise的失败回调onRejected</li>
<li>如果调用then时，promise已经成功，则执行onFulfilled，并将promise的值作为参数传递进去，如果promise已经失败，则执行onRejected，并将promise的原因作为参数传递进去。如果是还在pending状态，需要将onFulfilled和onRejected函数存放起来，等状态确定后，再依次将对应的函数执行（发布订阅模式）</li>
<li>promise可以then很多次，promise的then方法返回一个promise</li>
<li>如果then返回的是一个结果，那么就会把这个结果作为参数，传递给下一个then的传递给下一个then的成功的回调(onFulfilled)</li>
<li>如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个then的失败的回调(onRejected)</li>
<li>如果 then 返回的是一个promise，那么会等这个promise执行完，promise如果成功，就走下一个then的成功，如果失败，就走下一个then的失败</li>
</ol>
<div><pre><code><span>const</span> <span>PENDING</span> <span>=</span> <span>'pending'</span>
<span>const</span> <span>FULFILLED</span> <span>=</span> <span>'fufilled'</span>
<span>const</span> <span>REJECTED</span> <span>=</span> <span>'rejected'</span>
<span>function</span> <span>myPromise</span><span>(</span><span>executor</span><span>)</span> <span>{</span>
    <span>let</span> self <span>=</span> <span>this</span>
    self<span>.</span>status <span>=</span> <span>'pending'</span>
    self<span>.</span>onFulfilled <span>=</span> <span>[</span><span>]</span>
    self<span>.</span>onRejected <span>=</span> <span>[</span><span>]</span>
    self<span>.</span>value <span>=</span> <span>undefined</span>
    self<span>.</span>reason <span>=</span> <span>undefined</span>
    <span>function</span> <span>resolve</span><span>(</span><span>value</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>self<span>.</span>status <span>===</span> <span>PENDING</span><span>)</span> <span>{</span>
            self<span>.</span>status <span>=</span> <span>FULFILLED</span>
            self<span>.</span>value <span>=</span> value
            self<span>.</span>onFulfilled<span>.</span><span>forEach</span><span>(</span><span>fn</span> <span>=></span> <span>fn</span><span>(</span><span>)</span><span>)</span>
        <span>}</span>
    <span>}</span>
    <span>function</span> <span>reject</span><span>(</span><span>reason</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>self<span>.</span>status <span>===</span> <span>PENDING</span><span>)</span> <span>{</span>
            self<span>.</span>status <span>=</span> <span>REJECTED</span>
            self<span>.</span>reason <span>=</span> reason
            self<span>.</span>onRejected<span>.</span><span>forEach</span><span>(</span><span>fn</span> <span>=></span> <span>fn</span><span>(</span><span>)</span><span>)</span>
        <span>}</span>
    <span>}</span>

    <span>try</span> <span>{</span>
        <span>executor</span><span>(</span>resolve<span>,</span> reject<span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
        <span>reject</span><span>(</span>e<span>)</span>
    <span>}</span>
<span>}</span>
myPromise<span>.</span>prototype<span>.</span><span>then</span> <span>=</span> <span>function</span> <span>(</span><span>onFulfilled<span>,</span> onRejected</span><span>)</span> <span>{</span>
    <span>let</span> self <span>=</span> <span>this</span>
    <span>let</span> promise2 <span>=</span> <span>new</span> <span>myPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span>self<span>.</span>status <span>===</span> <span>FULFILLED</span><span>)</span> <span>{</span>
            <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
                <span>try</span> <span>{</span>
                    <span>let</span> x <span>=</span> <span>onFulfilled</span><span>(</span>self<span>.</span>value<span>)</span><span>;</span>
                    <span>resolvePromise</span><span>(</span>x<span>,</span> resolve<span>,</span> reject<span>)</span>
                <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
                    <span>reject</span><span>(</span>e<span>)</span>
                <span>}</span>
            <span>}</span><span>)</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span>self<span>.</span>status <span>===</span> <span>REJECTED</span><span>)</span> <span>{</span>
            <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
                <span>try</span> <span>{</span>
                    <span>let</span> x <span>=</span> <span>onRejected</span><span>(</span>self<span>.</span>reason<span>)</span>
                    <span>resolvePromise</span><span>(</span>x<span>,</span> resolve<span>,</span> reject<span>)</span>
                <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
                    <span>reject</span><span>(</span>e<span>)</span>
                <span>}</span>
            <span>}</span><span>)</span>
        <span>}</span> <span>else</span> <span>if</span> <span>(</span>self<span>.</span>status <span>===</span> <span>PENDING</span><span>)</span> <span>{</span>
            self<span>.</span>onFulfilled<span>.</span><span>push</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
                <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
                    <span>try</span> <span>{</span>
                        <span>let</span> x <span>=</span> <span>onFulfilled</span><span>(</span>self<span>.</span>value<span>)</span>
                        <span>resolvePromise</span><span>(</span>x<span>,</span> resolve<span>,</span> reject<span>)</span>
                    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
                        <span>reject</span><span>(</span>e<span>)</span>
                    <span>}</span>
                <span>}</span><span>)</span>
            <span>}</span><span>)</span>
            self<span>.</span>onRejected<span>.</span><span>push</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
                <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
                    <span>try</span> <span>{</span>
                        <span>let</span> x <span>=</span> <span>onRejected</span><span>(</span>self<span>.</span>reason<span>)</span>
                        <span>resolvePromise</span><span>(</span>x<span>,</span> resolve<span>,</span> reject<span>)</span>
                    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
                        <span>reject</span><span>(</span>e<span>)</span>
                    <span>}</span>
                <span>}</span><span>)</span>
            <span>}</span><span>)</span>
        <span>}</span>
    <span>}</span><span>)</span>
    <span>return</span> promise2
<span>}</span>


<span>function</span> <span>resolvePromise</span><span>(</span><span>x<span>,</span> resolve<span>,</span> reject</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>x <span>instanceof</span> <span>myPromise</span><span>)</span> <span>{</span>
        x<span>.</span><span>then</span><span>(</span><span>value</span> <span>=></span> <span>{</span>
            <span>resolve</span><span>(</span>value<span>)</span>
        <span>}</span><span>,</span> <span>(</span><span>reason</span><span>)</span> <span>=></span> <span>{</span>
            <span>reject</span><span>(</span>reason<span>)</span>
        <span>}</span><span>)</span>
    <span>}</span><span>else</span><span>{</span>
        <span>resolve</span><span>(</span>x<span>)</span>
    <span>}</span>
<span>}</span>

myPromise<span>.</span>prototype<span>.</span><span>all</span> <span>=</span> <span>function</span><span>(</span><span>array</span><span>)</span><span>{</span>
    <span>let</span> result<span>=</span><span>[</span><span>]</span>
    <span>let</span> index<span>=</span><span>0</span><span>//用来记录array中的值是否执行完</span>
    <span>return</span> <span>new</span> <span>myPromise</span><span>(</span><span>(</span><span>resolve<span>,</span>reject</span><span>)</span><span>=></span><span>{</span>
        <span>function</span> <span>addData</span><span>(</span><span>key<span>,</span>value</span><span>)</span><span>{</span>
            result<span>[</span>key<span>]</span><span>=</span>value
            index<span>++</span><span>;</span>
            <span>if</span><span>(</span>index<span>===</span>array<span>.</span>length<span>)</span><span>{</span>
                <span>resolve</span><span>(</span>result<span>)</span>
            <span>}</span>
        <span>}</span>
        <span>for</span><span>(</span><span>let</span> i<span>=</span><span>0</span><span>;</span>i<span>&lt;</span>array<span>.</span>length<span>;</span>i<span>++</span><span>)</span><span>{</span>
            <span>if</span><span>(</span>array<span>[</span>i<span>]</span> <span>instanceof</span> <span>myPromise</span><span>)</span><span>{</span>
                array<span>[</span>i<span>]</span><span>.</span><span>then</span><span>(</span><span>value</span><span>=></span><span>{</span> <span>addData</span><span>(</span>i<span>,</span>value<span>)</span><span>}</span><span>,</span><span>reason</span><span>=></span><span>{</span><span>reject</span><span>(</span>reason<span>)</span><span>}</span><span>)</span>
            <span>}</span><span>else</span><span>{</span>
                <span>addData</span><span>(</span>i<span>,</span>array<span>[</span>i<span>]</span><span>)</span>
            <span>}</span>
        <span>}</span>
    <span>}</span><span>)</span>
<span>}</span>

module<span>.</span>exports <span>=</span> myPromise
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br></div></div><p>测试代码：</p>
<div><pre><code><span>const</span> myPromise <span>=</span> <span>require</span><span>(</span><span>'./index'</span><span>)</span>

<span>const</span> promise <span>=</span> <span>new</span> <span>myPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>resolve</span><span>(</span><span>"win"</span><span>)</span>
<span>}</span><span>)</span>

<span>const</span> promise2 <span>=</span> <span>new</span> <span>myPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>resolve</span><span>(</span><span>"win2"</span><span>)</span>
<span>}</span><span>)</span>

<span>const</span> <span>test</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> <span>new</span> <span>myPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
        <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
            <span>resolve</span><span>(</span><span>"promise1"</span><span>)</span>
        <span>}</span><span>,</span> <span>2000</span><span>)</span>
    <span>}</span><span>)</span>
<span>}</span>

promise<span>.</span><span>then</span><span>(</span><span>value</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>value<span>)</span><span>;</span>
    <span>return</span> <span>test</span><span>(</span><span>)</span>
<span>}</span><span>)</span>
    <span>.</span><span>then</span><span>(</span><span>value</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>value<span>)</span><span>;</span>
    <span>}</span><span>)</span>

promise<span>.</span><span>all</span><span>(</span><span>[</span>promise<span>,</span> promise2<span>]</span><span>)</span><span>.</span><span>then</span><span>(</span><span>value</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>value<span>)</span><span>;</span>
<span>}</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>我们可以看到promise属于发布订阅模式</p>
<h2 id="防抖节流" tabindex="-1"> 防抖节流</h2>
<div><pre><code><span>// 防抖</span>
<span>function</span> <span>debounce</span><span>(</span><span>fn<span>,</span> delay <span>=</span> <span>300</span></span><span>)</span> <span>{</span>
    <span>let</span> timer
    <span>return</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
        <span>const</span> args <span>=</span> arguments
        <span>if</span> <span>(</span>timer<span>)</span> <span>{</span>
            <span>clearTimeout</span><span>(</span>timer<span>)</span>
        <span>}</span>
        timer <span>=</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
            <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span><span>;</span><span>//改变this指向为调用debounce所指的对象</span>
        <span>}</span><span>,</span> delay<span>)</span>
    <span>}</span>
<span>}</span>

document<span>.</span><span>getElementById</span><span>(</span><span>'btn'</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>debounce</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>alert</span><span>(</span><span>"111"</span><span>)</span>
<span>}</span><span>,</span> <span>1000</span><span>)</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>节流有两种方法：</p>
<div><pre><code><span>// 节流 使用时间戳</span>
<span>function</span> <span>throttle</span><span>(</span><span>fn<span>,</span> delay</span><span>)</span> <span>{</span>
    <span>var</span> previous <span>=</span> <span>0</span><span>;</span>
    <span>return</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
        <span>let</span> args <span>=</span> arguments
        <span>let</span> now <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span>
        <span>if</span> <span>(</span>now <span>-</span> previous <span>></span> delay<span>)</span> <span>{</span>
            <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span>
            previous <span>=</span> now
        <span>}</span>
    <span>}</span>
<span>}</span>

<span>// 使用setTimeout实现</span>
<span>function</span> <span>throttleSetTimeout</span><span>(</span><span>fn<span>,</span> delay</span><span>)</span> <span>{</span>
    <span>let</span> flag <span>=</span> <span>true</span>
    <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span><span>!</span>flag<span>)</span> <span>return</span>
        flag <span>=</span> <span>false</span>
        <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
            <span>fn</span><span>(</span><span>)</span>
            flag <span>=</span> <span>true</span>
        <span>}</span><span>,</span> delay<span>)</span>
    <span>}</span>
<span>}</span>

<span>function</span> <span>blur</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>1111</span><span>)</span><span>;</span>
<span>}</span>

<span>throttle</span><span>(</span><span>blur</span><span>(</span><span>)</span><span>,</span> <span>1000</span><span>)</span>
<span>throttleSetTimeout</span><span>(</span><span>blur</span><span>(</span><span>)</span><span>,</span> <span>1000</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>对两种实现方式比较得出：</p>
<p>第一种方式， 事件会立即执行， 第二种方式事件会在n秒后第一次执行第一种方式，事件停止触发后，就不会在执行事件函数， 第二种方式停止触发后仍然会再执行一次</p>
]]></content:encoded>
    </item>
    <item>
      <title>Node实现多线程</title>
      <link>https://avery-blog.vercel.app/willbe/Node/%E5%A4%9A%E7%BA%BF%E7%A8%8B.html</link>
      <guid>https://avery-blog.vercel.app/willbe/Node/%E5%A4%9A%E7%BA%BF%E7%A8%8B.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">Node实现多线程</source>
      <pubDate>Tue, 02 Aug 2022 10:27:46 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="node实现多线程" tabindex="-1"> Node实现多线程</h1>
<ol>
<li>
<p>判断当前是否为主线程， <code>isMainThread</code></p>
<div><pre><code><span>const</span><span>{</span>
	isMainThread
<span>}</span><span>=</span><span>require</span><span>(</span><span>'worker_threads'</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>启动多线程，这时候需要提供的<code>Worker</code>构造函数去启动，并且主线程也可以通过 <code>workerData</code>去传递数据给工作线程</p>
<div><pre><code><span>const</span><span>{</span>
	isMainThread<span>,</span>
    Worker<span>,</span>
    workerData<span>,</span>
    parentPort<span>,</span> <span>// 表示父进程的 MessagePort 类型的对象，在主线程里为 null</span>
<span>}</span><span>=</span><span>require</span><span>(</span><span>'worker_threads'</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>Worker构造函数第一个参数默认是执行的js文件路径，或者当第二个可选参数 <code>eval</code>为true时，可以行内执行</p>
<p>传递的数据通过第二个参数的workerData传入。在工作线程中，直接取<code>workerData</code></p>
<div><pre><code><span>// 主线程</span>
<span>const</span> worker <span>=</span> <span>new</span> <span>Worker</span><span>(</span>__filename<span>,</span> <span>{</span>
    <span>workerData</span><span>:</span> script<span>// 传递的数据，可以是任意合法js值，会深拷贝一份过去，比如数值</span>
 <span>}</span><span>)</span><span>;</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>线程通信</p>
<div><pre><code><span>// 主线程</span>
<span>const</span> worker <span>=</span> <span>new</span> <span>Worker</span><span>(</span>__filename<span>,</span> <span>{</span>
    <span>workerData</span><span>:</span> script
    <span>}</span><span>)</span><span>;</span>
worker<span>.</span><span>on</span><span>(</span><span>'message'</span><span>,</span> <span>（data）</span><span>=></span><span>{</span>
    console<span>.</span><span>log</span><span>(</span>data<span>)</span> <span>// 接收工作线程数据并打印</span>
<span>}</span><span>)</span><span>;</span>
parentPort<span>.</span><span>postMessage</span><span>(</span><span>'hello'</span><span>)</span> <span>// 向工作线程发送数据</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><pre><code><span>// 工作线程</span>
parentPort<span>.</span><span>postMessage</span><span>(</span><span>'hello'</span><span>)</span> <span>// 向父线程发送数据</span>
parentPort<span>.</span><span>on</span><span>(</span><span>'message'</span><span>,</span> <span>（data）</span><span>=></span><span>{</span>
    console<span>.</span><span>log</span><span>(</span>data<span>)</span> <span>// 接收主线程数据并打印</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>worker_threads</code>模块还有<code>MessageChannel</code>类和<code>MessagePort</code>类（继承于<code>EventEmitter</code>）</p>
<ul>
<li>MessageChannel类: 包含两个已经互相能够跨线程通信的 MessagePort 类型对象，可用于创建自定义的通信频道。实例化后包含两个属性<code>port1</code>和<code>port2</code>MessagePort 类型对象。可将其中一个发到工作线程后通过该对象实现自定义跨线程通信</li>
<li>MessagePort: 用于跨线程通信的句柄，继承了 EventEmitter，包括 close message 事件用于接收对象关闭和发送的消息，以及 close postMessage 等操作。</li>
</ul>
<p>例子：</p>
<div><pre><code><span>const</span> <span>{</span>
    isMainThread<span>,</span>
    Worker<span>,</span>
    parentPort<span>,</span>
    workerData
<span>}</span> <span>=</span> <span>require</span><span>(</span><span>'worker_threads'</span><span>)</span><span>;</span>

<span>if</span> <span>(</span>isMainThread<span>)</span> <span>{</span>
   
    <span>const</span> now <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
    console<span>.</span><span>log</span><span>(</span><span>"now"</span><span>+</span>now<span>)</span><span>;</span>
    <span>const</span> worker1 <span>=</span> <span>new</span> <span>Worker</span><span>(</span>__filename<span>,</span> <span>{</span>
        <span>workerData</span><span>:</span> <span>4</span>
    <span>}</span><span>)</span>
    worker1<span>.</span><span>on</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> now<span>)</span><span>;</span>
    <span>}</span><span>)</span>

    <span>const</span> worker2 <span>=</span> <span>new</span> <span>Worker</span><span>(</span>__filename<span>,</span> <span>{</span>
        <span>workerData</span><span>:</span> <span>4</span>
    <span>}</span><span>)</span>
    worker2<span>.</span><span>on</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> now<span>)</span><span>;</span>
    <span>}</span><span>)</span>

    <span>const</span> worker3 <span>=</span> <span>new</span> <span>Worker</span><span>(</span>__filename<span>,</span> <span>{</span>
        <span>workerData</span><span>:</span> <span>4</span>
    <span>}</span><span>)</span>
    worker3<span>.</span><span>on</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> now<span>)</span><span>;</span>
    <span>}</span><span>)</span>

<span>}</span> <span>else</span> <span>{</span>

    <span>const</span> <span>fib</span> <span>=</span> <span>n</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span>n <span>===</span> <span>0</span><span>)</span> <span>return</span> <span>0</span>
        <span>else</span> <span>if</span> <span>(</span>n <span>===</span> <span>1</span><span>)</span> <span>return</span> <span>1</span>
        <span>else</span> <span>return</span> <span>fib</span><span>(</span>n <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>fib</span><span>(</span>n <span>-</span> <span>2</span><span>)</span>
    <span>}</span>
    <span>const</span> number <span>=</span> workerData<span>;</span>
    console<span>.</span><span>log</span><span>(</span>number<span>)</span><span>;</span>
    <span>const</span> res <span>=</span> <span>fib</span><span>(</span>number<span>)</span><span>;</span>

    parentPort<span>.</span><span>postMessage</span><span>(</span>res<span>)</span>
<span>}</span>


</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div></li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Axios</title>
      <link>https://avery-blog.vercel.app/willbe/Vue/Axios%E5%8E%9F%E7%90%86.html</link>
      <guid>https://avery-blog.vercel.app/willbe/Vue/Axios%E5%8E%9F%E7%90%86.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">Axios</source>
      <category>Vue</category>
      <pubDate>Mon, 18 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="axios" tabindex="-1"> Axios</h1>
<p>Axios 是一个基于 <em><a href="https://javascript.info/promise-basics" target="_blank" rel="noopener noreferrer">promise</a></em> 网络请求库，作用于<a href="https://nodejs.org/" target="_blank" rel="noopener noreferrer"><code>node.js</code></a> 和浏览器中。 它是 <em><a href="https://www.lullabot.com/articles/what-is-an-isomorphic-application" target="_blank" rel="noopener noreferrer">isomorphic</a></em> 的(即同一套代码可以运行在浏览器和 node.js 中)。在服务端它使用原生 node.js <code>http</code> 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</p>
<h2 id="特性" tabindex="-1"> 特性</h2>
<ul>
<li>
<p>从浏览器创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener noreferrer">XMLHttpRequests</a></p>
</li>
<li>
<p>从 node.js 创建 <a href="http://nodejs.org/api/http.html" target="_blank" rel="noopener noreferrer">http</a> 请求</p>
</li>
<li>
<p>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener noreferrer">Promise</a> API</p>
</li>
<li>
<p>拦截请求和响应</p>
</li>
<li>
<p>转换请求和响应数据</p>
</li>
<li>
<p>取消请求</p>
</li>
<li>
<p>自动转换 JSON 数据</p>
</li>
<li>
<p>客户端支持防御<a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery" target="_blank" rel="noopener noreferrer">XSRF</a></p>
</li>
</ul>
<h2 id="axios-api" tabindex="-1"> Axios API</h2>
<p>可以向 <code>axios</code> 传递相关配置来创建请求</p>
<div><pre><code>// 发起一个post请求 axios({ method: 'post', url: '/user/12345', data: {
firstName: 'Fred', lastName: 'Flintstone' } });
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><div><pre><code>// 在 node.js 用GET请求获取远程图片
axios({
  method: 'get',
  url: 'http://bit.ly/2mTM3nY',
  responseType: 'stream'
})
  .then(function (response) {
    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))
  });
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h5 id="axios-url-config" tabindex="-1"> axios(url[, config])</h5>
<div><pre><code>// 发起一个 GET 请求 (默认请求方式)
axios('/user/12345');
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h3 id="请求方式别名" tabindex="-1"> 请求方式别名</h3>
<p>为了方便起见，已经为所有支持的请求方法提供了别名。</p>
<h5 id="axios-request-config" tabindex="-1"> axios.request(config)</h5>
<h5 id="axios-get-url-config" tabindex="-1"> axios.get(url[, config])</h5>
<h5 id="axios-delete-url-config" tabindex="-1"> axios.delete(url[, config])</h5>
<h5 id="axios-head-url-config" tabindex="-1"> axios.head(url[, config])</h5>
<h5 id="axios-options-url-config" tabindex="-1"> axios.options(url[, config])</h5>
<h5 id="axios-post-url-data-config" tabindex="-1"> axios.post(url[, data[, config]])</h5>
<h5 id="axios-put-url-data-config" tabindex="-1"> axios.put(url[, data[, config]])</h5>
<h5 id="axios-patch-url-data-config" tabindex="-1"> axios.patch(url[, data[, config]])</h5>
<h6 id="注意" tabindex="-1"> 注意</h6>
<p>在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</p>
<h2 id="实现一个简单版-axios" tabindex="-1"> 实现一个简单版 Axios</h2>
<div><pre><code><span>class</span> <span>Axios</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>// 实现axios.interceptors.response.use和axios.interceptors.request.use</span>
    <span>this</span><span>.</span>interceptors <span>=</span> <span>{</span>
      <span>request</span><span>:</span> <span>new</span> <span>InterceptorsManage</span><span>(</span><span>)</span><span>,</span>
      <span>response</span><span>:</span> <span>new</span> <span>InterceptorsManage</span><span>(</span><span>)</span><span>,</span>
    <span>}</span><span>;</span>
  <span>}</span>
  <span>request</span><span>(</span><span>config</span><span>)</span> <span>{</span>
    <span>/*
            先是 mergeConfig ... 等，不再阐述
  		*/</span>
    <span>// Hook up interceptors middleware 创建拦截器链. dispatchRequest 是重中之重，后续重点</span>
    <span>//   dispatchRequest===this.sendAjax.bind(this)</span>
    <span>let</span> chain <span>=</span> <span>[</span><span>this</span><span>.</span><span>sendAjax</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span><span>,</span> <span>undefined</span><span>]</span><span>;</span>

    <span>//    请求拦截</span>
    <span>// push各个拦截器方法 注意：interceptor.fulfilled 或 interceptor.rejected 是可能为undefined</span>
    <span>this</span><span>.</span>interceptors<span>.</span>request<span>.</span>handlers<span>.</span><span>forEach</span><span>(</span><span>(</span><span>interceptors</span><span>)</span> <span>=></span> <span>{</span>
      <span>// 请求拦截器逆序 注意此处的 forEach 是自定义的拦截器的forEach方法</span>
      chain<span>.</span><span>unshift</span><span>(</span>interceptors<span>.</span>fullfield<span>,</span> interceptors<span>.</span>rejected<span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>

    <span>// 响应拦截</span>
    <span>this</span><span>.</span>interceptors<span>.</span>response<span>.</span>handlers<span>.</span><span>forEach</span><span>(</span><span>(</span><span>interceptors</span><span>)</span> <span>=></span> <span>{</span>
      <span>// 响应拦截器顺序 注意此处的 forEach 是自定义的拦截器的forEach方法</span>
      chain<span>.</span><span>push</span><span>(</span>interceptors<span>.</span>fullfield<span>,</span> interceptors<span>.</span>rejected<span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>

    <span>// 初始化一个promise对象，状态为resolved，接收到的参数为已经处理合并过的config对象</span>
    <span>// 执行队列，每次执行一对，并给promise赋最新的值</span>
    <span>let</span> promise <span>=</span> Promise<span>.</span><span>resolve</span><span>(</span>config<span>)</span><span>;</span>

    <span>// 循环拦截器的链</span>
    <span>while</span> <span>(</span>chain<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
      promise <span>=</span> promise<span>.</span><span>then</span><span>(</span>chain<span>.</span><span>shift</span><span>(</span><span>)</span><span>,</span> chain<span>.</span><span>shift</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// 每一次向外弹出拦截器</span>
    <span>}</span>
    <span>return</span> promise<span>;</span>
  <span>}</span>
  <span>sendAjax</span><span>(</span><span>config</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve</span><span>)</span> <span>=></span> <span>{</span>
      <span>const</span> <span>{</span> url <span>=</span> <span>""</span><span>,</span> method <span>=</span> <span>"get"</span><span>,</span> data <span>=</span> <span>{</span><span>}</span> <span>}</span> <span>=</span> config<span>;</span>
      <span>const</span> xhr <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>
      xhr<span>.</span><span>open</span><span>(</span>method<span>,</span> url<span>,</span> <span>true</span><span>)</span><span>;</span>
      xhr<span>.</span><span>onload</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>xhr<span>.</span>responseText<span>)</span><span>;</span>
        <span>resolve</span><span>(</span>xhr<span>.</span>responseText<span>)</span><span>;</span>
      <span>}</span><span>;</span>
      xhr<span>.</span><span>send</span><span>(</span>data<span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><p>将 Axios.prototype 上的方法搬运到 request 上</p>
<div><pre><code><span>function</span> <span>CreateAxiosFn</span><span>(</span><span>)</span> <span>{</span>
  <span>let</span> axios <span>=</span> <span>new</span> <span>Axios</span><span>(</span><span>)</span><span>;</span>
  <span>let</span> req <span>=</span> axios<span>.</span><span>request</span><span>.</span><span>bind</span><span>(</span>axios<span>)</span><span>;</span>
  utils<span>.</span><span>extend</span><span>(</span>req<span>,</span> <span>Axios</span><span>.</span>prototype<span>,</span> axios<span>)</span><span>;</span>
  <span>// 当执行axios.interceptors.response.use和axios.interceptors.request.use的时候，实现获取axios实例上的interceptors对象，然后获取response或request拦截器，再执行对应的拦截器的use方法</span>
  utils<span>.</span><span>extend</span><span>(</span>req<span>,</span> axios<span>)</span><span>;</span>
  <span>return</span> req<span>;</span>
<span>}</span>

<span>let</span> axios <span>=</span> <span>CreateAxiosFn</span><span>(</span><span>)</span><span>;</span>

<span>const</span> methodArr <span>=</span> <span>[</span><span>"get"</span><span>,</span> <span>"delete"</span><span>,</span> <span>"head"</span><span>,</span> <span>"options"</span><span>,</span> <span>"put"</span><span>,</span> <span>"patch"</span><span>,</span> <span>"post"</span><span>]</span><span>;</span>
methodArr<span>.</span><span>forEach</span><span>(</span><span>(</span><span>met</span><span>)</span> <span>=></span> <span>{</span>
  <span>Axios</span><span>.</span>prototype<span>[</span>met<span>]</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"执行"</span> <span>+</span> met <span>+</span> <span>"方法"</span><span>)</span><span>;</span>
    <span>if</span> <span>(</span><span>[</span><span>"get"</span><span>,</span> <span>"delete"</span><span>,</span> <span>"head"</span><span>,</span> <span>"options"</span><span>]</span><span>.</span><span>includes</span><span>(</span>met<span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>this</span><span>.</span><span>request</span><span>(</span><span>{</span>
        <span>method</span><span>:</span> met<span>,</span>
        <span>url</span><span>:</span> arguments<span>[</span><span>0</span><span>]</span><span>,</span>
        <span>...</span><span>(</span>arguments<span>[</span><span>1</span><span>]</span> <span>||</span> <span>{</span><span>}</span><span>)</span><span>,</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> <span>this</span><span>.</span><span>request</span><span>(</span><span>{</span>
        <span>method</span><span>:</span> met<span>,</span>
        <span>url</span><span>:</span> arguments<span>[</span><span>0</span><span>]</span><span>,</span>
        <span>data</span><span>:</span> arguments<span>[</span><span>1</span><span>]</span> <span>||</span> <span>{</span><span>}</span><span>,</span>
        <span>...</span><span>(</span>arguments<span>[</span><span>2</span><span>]</span> <span>||</span> <span>{</span><span>}</span><span>)</span><span>,</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span>
  <span>}</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><div><pre><code><span>//首先实现一个工具类，实现将b方法混入a，并且修改this指向</span>
<span>const</span> utils <span>=</span> <span>{</span>
  <span>extend</span><span>(</span><span>a<span>,</span> b<span>,</span> context</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> key <span>in</span> b<span>)</span> <span>{</span>
      <span>if</span> <span>(</span>b<span>.</span><span>hasOwnProperty</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>typeof</span> b<span>[</span>key<span>]</span> <span>===</span> <span>"function"</span><span>)</span> <span>{</span>
          a<span>[</span>key<span>]</span> <span>=</span> b<span>[</span>key<span>]</span><span>.</span><span>bind</span><span>(</span>context<span>)</span><span>;</span>
        <span>}</span> <span>else</span> <span>{</span>
          a<span>[</span>key<span>]</span> <span>=</span> b<span>[</span>key<span>]</span><span>;</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>构建拦截器的构造函数</p>
<div><pre><code>class InterceptorsManage{
    constructor(){
        this.handlers=[]
    }
    use(fullfield,rejected){
        this.handlers.push({
            fullfield,
            rejected
        })
    }
}

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h1 id="小结" tabindex="-1"> 小结</h1>
<p><img src="@source/.vuepress/public/image/image-20220718184103453.png" alt="image-20220718184103453" loading="lazy"></p>
<p>参考文献：https://cloud.tencent.com/developer/article/1794288</p>
]]></content:encoded>
    </item>
    <item>
      <title>beforeUnmount和unmounted的使用场景</title>
      <link>https://avery-blog.vercel.app/willbe/Vue/beforeUnmount%E5%92%8Cunmounted%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html</link>
      <guid>https://avery-blog.vercel.app/willbe/Vue/beforeUnmount%E5%92%8Cunmounted%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">beforeUnmount和unmounted的使用场景</source>
      <category>Vue</category>
      <pubDate>Wed, 27 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="beforeunmount和unmounted的使用场景" tabindex="-1"> beforeUnmount和unmounted的使用场景</h1>
<p>beforeUnmount发生在组件unmount之前，unmounted发生在组件unmount之后，而unmount函数做的事情，就是执行组件自身的一些清理逻辑，递归销毁子组件，进而把组件下面所有的DOM也全部移除了。</p>
<p>因此，当我们执行的beforeUnmount的时候，还是可以访问组件内部的DOM的，如果你的代码逻辑依赖DOM，那么必须在beforeUnmount钩子函数中执行。</p>
<p>此外，Vue.js只能在unmount函数中做一些自身的内存清理，而对于用户的一些自定义操作所占用的内存，是不会清理的</p>
<h2 id="常见的应用场景" tabindex="-1"> 常见的应用场景</h2>
<ol>
<li>
<p>定时器</p>
<p>假设我们有一个计数组件，每秒加一，最简单的实现就是定义一个定时器，</p>
<div><pre><code><span>export</span> <span>default</span> <span>{</span>
  <span>name</span><span>:</span> <span>""</span><span>,</span>
  <span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>onMounted</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      timer <span>=</span> <span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        count<span>.</span>value<span>++</span><span>;</span>
      <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
    
    <span>return</span> <span>{</span>
      count<span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>我们可以在unmount钩子函数里用setInterval函数创建了一个定时器timer，如果这个组件被销毁了，定时器是不会主动销毁的，也就造成了内存泄漏。可以在beforeUnmount或者在unmounted钩子函数中主动清理定时器</p>
<div><pre><code>unmounted(() => {
      clearInterval(timer);
    });
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>全局注册事件</p>
<p>有时候，需要在组件中监听某些全局事件</p>
<p>我们在 <code>onMounted</code> 钩子函数里监听了全局的 <code>resize</code> 事件，当窗口大小改变的时候，就会执行事件函数 <code>onResize</code>，如果这个组件被销毁了，这个全局事件是不会主动解绑的。</p>
<p>因此需要你在 <code>beforeUnmount</code> 或者 <code>unMounted</code> 钩子函数中主动解绑事件，如下：</p>
<div><pre><code><span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>onMounted</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      window<span>.</span><span>removeEventListener</span><span>(</span><span>"resize"</span><span>,</span> onResize<span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
    <span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
      <span>// 做一些 DOM 操作，数据更新等</span>
    <span>}</span>
    <span>beforeUnmount</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      window<span>.</span><span>removeEventListener</span><span>(</span><span>"resize"</span><span>,</span> onResize<span>)</span><span>;</span>
      <span>function</span> <span>onResize</span><span>(</span><span>)</span> <span>{</span>
        <span>// 做一些 DOM 操作，数据更新等</span>
      <span>}</span>
    <span>}</span><span>)</span><span>;</span>

    
    <span>return</span> <span>{</span>
      count<span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>注意这里不能用匿名函数，因为 <code>addEventListener</code> 和 <code>removeEventListener</code> 监听的事件函数需要指向同一个函数指针。</p>
</li>
<li>
<p>第三方库</p>
<p>还有很多时候，我们会依赖一些第三方库辅助开发，而这些第三方库往往都会暴露一些 API 来做一些库内部的清理操作。</p>
<p>比如我们在移动端常用的 BetterScroll，就提供了清理的 API，我们可以这么使用它：</p>
<div><pre><code><span>export</span> <span>default</span> <span>function</span> <span>useScroll</span><span>(</span><span>wrapperRef<span>,</span> options</span><span>)</span> <span>{</span>  
	<span>const</span> scroll <span>=</span> <span>ref</span><span>(</span><span>null</span><span>)</span>  
	<span>onMounted</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>    
	scroll<span>.</span>value <span>=</span> <span>new</span> <span>BScroll</span><span>(</span>wrapperRef<span>.</span>value<span>,</span> options<span>)</span>  
	<span>}</span><span>)</span>  		
	<span>onUnmounted</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>    
	scroll<span>.</span>value<span>.</span><span>destroy</span><span>(</span><span>)</span>  <span>}</span><span>)</span>  
	<span>return</span> scroll
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>为了独立 BetterScroll 的逻辑，我们定义了 useScroll 的 hook 函数，在这里我们仍然可以使用 Vue.js 提供的生命周期函数。</p>
<p>由于 BetterScroll 的初始化依赖容器的 DOM，所以我们在 onMounted 内部执行它的初始化逻辑。相应的，这次我们在 onUnmounted 内部执行 BS 实例的 destory 方法，这样就避免了组件销毁后 BS 实例内部带来的内存泄漏。</p>
</li>
</ol>
<h2 id="总结" tabindex="-1"> 总结</h2>
<p>在大多数情况下，我们使用 beforeUnmount 或者 unmounted 钩子函数都可以执行一些清理逻辑，至于用什么在于你的清理逻辑中有没有依赖 DOM，如果不依赖那么两者皆可。</p>
]]></content:encoded>
    </item>
    <item>
      <title>为什么Vue3的组件库都在使用jsx或tsx</title>
      <link>https://avery-blog.vercel.app/willbe/article/%E4%B8%BA%E4%BB%80%E4%B9%88Vue3%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8jsx%E6%88%96tsx.html</link>
      <guid>https://avery-blog.vercel.app/willbe/article/%E4%B8%BA%E4%BB%80%E4%B9%88Vue3%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8jsx%E6%88%96tsx.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">为什么Vue3的组件库都在使用jsx或tsx</source>
      <category>零碎的文章</category>
      <pubDate>Mon, 11 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="为什么vue3的组件库都在使用jsx或tsx" tabindex="-1"> 为什么Vue3的组件库都在使用jsx或tsx</h1>
<p>首先Vue3出现了composition API，optionsAPI与compositionAPI的区别如下：</p>
<p>Vue2使用的是optionsAPI来定义一个组件内部的属性如method、data等，但是在项目中如果想实现一个功能，可能会在method、computed等书写逻辑，就会使后面维护的时候难寻找到这个功能的逻辑，所以出现了compositionAPI，将同一个功能的api统一放到一个地方，这样的话开发和维护就简便了很多。</p>
<p>对于JSX和template，在业务场景下尽量选择template。Vue3基于template分析做了很多优化，并且对使用者是透明的，编译器默默完成优化操作，而使用JSX的话需要手动进行一些优化操作，比如提取静态的JSX片段到render函数外部。而组件库的代码一般比业务代码具有更强的动态性，使用JSX可以灵活控制动态DOM片段。</p>
<p>举个例子，假设有一个场景，需要根据 props 上的 reverse 属性，来决定是否要调换两块内容的渲染顺序。</p>
<p>在 JSX 中可以很容易实现：</p>
<div><pre><code><span>const</span> <span>renderContent</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> Content <span>=</span> <span>[</span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>foo<span>"</span></span><span>></span></span><span>Foo DOM...</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>,</span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>bar<span>"</span></span><span>></span></span><span>Bar DOM...</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>,</span>
  <span>]</span><span>;</span>
  <span>if</span> <span>(</span>props<span>.</span>reverse<span>)</span> <span>{</span>
    Content<span>.</span><span>reverse</span><span>(</span><span>)</span><span>;</span>
  <span>}</span>
  <span>return</span> <span><span><span>&lt;</span>div</span><span>></span></span><span>{</span>Content<span>}</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>如果通过模板来实现，在不抽象子组件的情况下，foo 和 bar 的模板结构需要重复写两遍，才能满足这个需求：</p>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span><span>
  </span><span><span><span>&lt;</span>div</span><span>></span></span><span>
    </span><span><span><span>&lt;</span>template</span> <span>v-if</span><span><span>=</span><span>"</span>reverse<span>"</span></span><span>></span></span><span>
      </span><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>bar<span>"</span></span><span>></span></span><span>Bar DOM...</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
      </span><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>foo<span>"</span></span><span>></span></span><span>Foo DOM...</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
    </span><span><span><span>&lt;/</span>template</span><span>></span></span><span>
    </span><span><span><span>&lt;</span>template</span> <span>v-else</span><span>></span></span><span>
      </span><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>foo<span>"</span></span><span>></span></span><span>Foo DOM...</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
      </span><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>bar<span>"</span></span><span>></span></span><span>Bar DOM...</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
    </span><span><span><span>&lt;/</span>template</span><span>></span></span><span>
  </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
</span><span><span><span>&lt;/</span>template</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p><code>JSX</code> 是 <code>JavaScript</code> 的扩展语法，这种 <code>&lt;&gt;&lt;/&gt;</code> 标签的写法就是 JSX。JSX 编写的组件通过预处理器 babel 解析后，再交给 React 库渲染到指定<a href="https://www.zhihu.com/search?q=%E7%88%B6%E5%AE%B9%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%22419011328%22%7D" target="_blank" rel="noopener noreferrer">父容器</a>下，形成最终html页面，供浏览器解析和显示。</p>
<p>JSX的表达能力比template更强，JSX的表达上限是JS语言，而template表达能力的上限是Vue的各种指令。</p>
<p>JSX的好处之一是把组件或标签当作普通属性传来传去，而template只能使用slot。</p>
]]></content:encoded>
    </item>
    <item>
      <title>什么是堆栈？它们之间的区别与联系</title>
      <link>https://avery-blog.vercel.app/willbe/article/%E4%BB%80%E4%B9%88%E6%98%AF%E5%A0%86%E6%A0%88%EF%BC%9F%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB.html</link>
      <guid>https://avery-blog.vercel.app/willbe/article/%E4%BB%80%E4%B9%88%E6%98%AF%E5%A0%86%E6%A0%88%EF%BC%9F%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E8%81%94%E7%B3%BB.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">什么是堆栈？它们之间的区别与联系</source>
      <category>零碎的文章</category>
      <pubDate>Thu, 14 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="什么是堆栈-它们之间的区别与联系" tabindex="-1"> 什么是堆栈？它们之间的区别与联系</h1>
<p>堆和栈的概念存在于数据结构和操作系统内存中。在数据结构中，栈的存取方式是先进后出的，而堆是一个优先队列，按优先级来进行排序。优先级可以按照大小来规定。完全二叉树就是堆的一种方式。</p>
<p>而在操作系统中，</p>
<p>栈区，是由编译器自动分配释放，存放函数的参数值、局部变量等，他的操作方式类似数据结构中的栈</p>
<p>堆区，是由程序员分配和释放的，如果程序员不主动释放，程序结束时会有垃圾回收机制回收</p>
<p>区别与联系：</p>
<p>1.申请方式不同</p>
<p>栈是由系统自动分配，如声明在函数中一个基本类型变量，系统将会在栈中分配一块空间</p>
<p>堆是需要程序员自己申请并指明大小</p>
<p>2.申请后系统的响应</p>
<p>对于栈，只要栈的剩余空间大于所申请的空间，系统就会为程序提供内存，否则将报异常提示栈溢出</p>
<p>对于堆，操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并且将该结点的空间分配给程序，另外，对于大多数的系统，会在这块内存空间的首地址记录本次分配的大小，这样，代码中的delete语句才能正确的释放本内存空间。另外，由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。</p>
<p>3.申请大小的限制</p>
<p>栈：在windows下，栈是向低地址扩展的数据结构，是一块连续的内存的区域。栈顶的地址和栈的最大容量是系统预先规定好的，在windows下，栈的大小2M，如果申请的空间超过栈的剩余空间，将提示栈溢出</p>
<p>堆：堆是向高地址扩展的数据结构，是不连续的内存区域，这是由于系统使用链表来存储的空间内存地址，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存</p>
<p>4.申请效率的比较</p>
<p>栈是由系统分配，速度较快，但程序员是无法控制的</p>
<p>堆是由new分配的内存，一般速度会比栈慢，而且容易产生内存碎片</p>
<p>总结：堆和栈的概念存在于数据结构中和操作系统内存中。在数据结构中，栈中数据的存取方式为 先进后出。而堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。完全 二叉树是堆的一种实现方式。在操作系统中，内存被分为栈区和堆区。栈区内存由编译器自动分 配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。堆区内存一 般由程序员分配释放，若程序员不释放，程序结束时可能由垃圾回收机制回收。</p>
]]></content:encoded>
    </item>
    <item>
      <title>如何让{}==1，JavaScript 中的装箱和拆箱</title>
      <link>https://avery-blog.vercel.app/willbe/article/%E5%A6%82%E4%BD%95%E8%AE%A9%7B%7D==1.html</link>
      <guid>https://avery-blog.vercel.app/willbe/article/%E5%A6%82%E4%BD%95%E8%AE%A9%7B%7D==1.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">如何让{}==1，JavaScript 中的装箱和拆箱</source>
      <category>零碎的文章</category>
      <pubDate>Wed, 13 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="如何让-1-javascript-中的装箱和拆箱" tabindex="-1"> 如何让{}==1，JavaScript 中的装箱和拆箱</h1>
<p><img src="@source/.vuepress/public/image/image-20220713163905915.png" alt="image-20220713163905915" loading="lazy"></p>
<p>首先我们可以看到在浏览器中，{}==1 是为 false，那怎么才能让他为 true 呢？</p>
<p>试试下面的代码</p>
<div><pre><code>Object.prototype.valueOf=()=>1
console.log({}==1)
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p><img src="@source/.vuepress/public/image/image-20220713173520537.png" alt="image-20220713173520537" loading="lazy"></p>
<p>JavaScript 有两种数据类型</p>
<p>基本数据类型：字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol</p>
<p>引用类型：对象(Object)、数组(Array)、函数(Function)</p>
<p>在 js 中，有四个基本的包装类型 String、Number、Boolean、Symbol</p>
<h2 id="装箱操作" tabindex="-1"> 装箱操作</h2>
<p>所谓装箱就是将基本数据类型转换为对应的引用类型的操作。</p>
<p>装箱分隐式装箱和显式装箱两种方式</p>
<h3 id="隐式装箱" tabindex="-1"> 隐式装箱</h3>
<p>隐式装箱由 <strong>引擎自动执行</strong></p>
<div><pre><code>let a=123 
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>基本类型是不能添加属性和方法的，添加会报错。</p>
<div><pre><code>let a="js"
a.subText="vue"
a.subTextfn=()=>{
	console.log('react')
}
console.log(a.subText)
console.log(a.subTextFn())//Uncaught TypeError: a.subTextFn is not a function
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>那为什么普通的字符串类型可以调用方法呢，比如 a.substring(),a.indexOf()等</p>
<p>这就要提到装箱，在读取值得时候，引擎会创建一个基本类型所对应得 <strong>包装类型的对象</strong></p>
<p><img src="@source/.vuepress/public/image/image-20210224170755139.png" alt="image-20210224170755139" loading="lazy"></p>
<p>隐式装箱的执行步骤</p>
<div><pre><code>let s1="s1"//隐式装箱
let s2=s1.substring(2)
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>执行步骤:</p>
<p>(1) 先创建 String 类型的一个实例</p>
<p>(2)在实例中调用制定的方法</p>
<p>(3)销毁这个实例</p>
<p>上面的三个步骤转换为代码，如下：</p>
<div><pre><code>// 1
let s1 = new String('s1');
// 2
let s2 = s1.substring(2);
// 3
s1 = null;
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>所以我们在基本类型上可以使用方法，是因为有隐式装箱操作。</p>
<p>隐式装箱当读取一个基本类型值时，后台会创建一个该基本类型所对应的基本包装类型对象。在这个基本类型的对象上调用方法，其实就是在这个包装类型的对象调用方法，这个基本包装类型的对象是临时的，它只存在于方法调用那一行代码执行的瞬间，执行方法后立即被销毁。这也就是在基本类型上添加属性和方法会不识别或报错的原因</p>
<h3 id="显式装箱" tabindex="-1"> 显式装箱</h3>
<p>显示装箱通过基本包装类型对象对基本类型进行显示装箱</p>
<div><pre><code>let s1 = new String('s1');
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="拆箱" tabindex="-1"> 拆箱</h2>
<p>拆箱和装箱相反了，拆箱是指把引用类型转换为基本的数据类型。通常通过引用类型的 <code>valueOf()</code>和<code>toString()</code>方法来实现</p>
<p>引用类型的值转换成基本类型的值就是拆箱，拆箱必须要提两个方法 toString() 和 valueOf() ，toString() 返回字符串，valueOf() 返回对象本身。</p>
<div><pre><code>//更改对象的 toString() 和 valueOf() 两个方法：
var web = {
  'name':'html',
  valueOf: () => {
    console.log("valueOf");
  },
  toString: () => {
    console.log("toString");
  }
}
console.log(String(web))//toString undefined
console.log(Number(web))//valueOf NaN
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>为什么有时候先走了 valueOf() 有时候先执行 toString()</p>
<p>对象中有 toPrimitive 方法，此方法提供了用于将对象强制换为基元并替换 toString()和 valueOf()方法的通用接口</p>
<p>运行方法时，判断 preferredType 的值是哪种类型：</p>
<p>如果是 Number：</p>
<p>(1)如果是基本类型,则按原样返回。</p>
<p>(2)否则，输入的是一个对象，调用 obj.valueOf()方法，如果结果是原始的，则将其返回。</p>
<p>(3)否则，调用 obj.toString()方法，如果结果是原始数据，则将其返回</p>
<p>(4)否则，抛出 TypeError</p>
<p>如果是 String，则调换(2)(3)</p>
<p>如果没有 PreferredType，对于 Date 的实例将其设置为 String。</p>
<p>对于所有其他值，设置为 Number</p>
]]></content:encoded>
    </item>
    <item>
      <title>个人项目</title>
      <link>https://avery-blog.vercel.app/project/ui.html</link>
      <guid>https://avery-blog.vercel.app/project/ui.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">个人项目</source>
      <category>使用指南</category>
      <pubDate>Fri, 15 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="个人项目" tabindex="-1"> 个人项目</h1>
]]></content:encoded>
    </item>
    <item>
      <title>关于我</title>
      <link>https://avery-blog.vercel.app/me/</link>
      <guid>https://avery-blog.vercel.app/me/</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">关于我</source>
      <pubDate>Wed, 20 Apr 2022 15:27:27 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>Avery的个人简历</p>
</blockquote>
<h1 id="关于我" tabindex="-1"> 关于我</h1>
<h2 id="专业技能" tabindex="-1"> 专业技能</h2>
<ul>
<li>熟悉HTML5、CSS3、能够独立快速进行PC端网站开发。</li>
<li>熟练掌握原生JavaScript、DOM节点的操作，ES5/ES6的新特性。</li>
<li>熟练掌握Vue2、Vue3渐进式框架，以及Vue的核心插件Vue Router、Vuex、VueCLI；了解Vue原理。</li>
<li>熟练使用Vue组件库Element UI、Vant，Ant design UI以及PC端开发框架Bootstrap， 网络请求库Axios。</li>
<li>掌握Git基本控制命令和版本控制，了解前端工程化webpack、Vite等前端工具。</li>
<li>了解计算机网络知识，如HTTP协议、TCP/IP协议等。</li>
</ul>
<h2 id="实习经历" tabindex="-1"> 实习经历</h2>
<p><strong>yy直播</strong> <span>  </span> 2022.5-至今</p>
<div>前端开发</div>
<ul>
<li>
<p><strong>SDK端看板可视化平台：</strong> 基于Vue3+Vite+Echarts技术栈，通过数据可视化形式呈现指标趋势多维度对比分析和核心转化路径分析的全貌，结合卡片、趋势图、漏斗图、表格等方式，展示当天核心指标数值、波动、发展趋势以及转化率等业务关系的数据变化。帮助业务负责人及相关leader掌控全局数据、洞悉业务的核心细节。完成项目的交付以及后期调整版本迭代。项目上线后业务方反馈良好，并且积极要求尽快推动后续看板上线。</p>
</li>
<li>
<p><strong>Bigda ui组件库：</strong> 基于VuePress和Ant组件库，同时整合项目中常见的业务组件编写大数据中心Bigda ui组件库，通过规范项目样式，方便部门间的开发与参考，提高开发效率。</p>
</li>
</ul>
<h2 id="项目经历" tabindex="-1"> 项目经历</h2>
<p><strong>基于物联网的光禽贴标溯源系统</strong></p>
<p><strong>项目描述：</strong> 该项目是与中山市小榄三鸟综合市场合作的省级项目，一个基于Vue的web应用，对光禽的全产业链从光禽屠宰及交易环节的追踪溯源以及监控和管理。</p>
<ul>
<li>利用VueCLI进行项目搭建，使用Vue Router搭建项目路由。</li>
<li>利用Vuex、localStorage实现状态保存与共享、用于保存用户核心信息。</li>
<li>利用Echarts将数据渲染成图表形式，方便禽类数据进行监控展示</li>
<li>配置路由守卫监听登录状态，对路由跳转设置拦截，进行权限认证。</li>
<li>整体遵循Vue组件化开发思想，尽量复用相同组件。</li>
<li>使用webpack优化项目，使用extract-text-webpack-plugin分离CSS；提取第三方库；使用CommonsChunkPlugin提取共同依赖，避免重复打包；使用loadash时按需打包，加快打包时间和缩小打包后的体积。</li>
<li>使用loashed防抖函数，减少请求的次数。</li>
</ul>
<p><strong>智能扶贫信息可视化管理系统</strong></p>
<p><strong>项目描述：</strong> 一个基于Vue的web应用项目，对扶贫对象、帮扶主体、帮扶措施、脱贫成效进行综合分析，为扶贫办的决策和评估提供数据依据，提高扶贫工作效率，达到“六个精准”要求。</p>
<ul>
<li>使用Vue.js+Element UI对就业援助、住房保障、教育保障、医疗保障、贫困户统计进行组件化开发，使用Vue-Router进行前端路由管理。</li>
<li>使用Echarts实现脱贫成效动态监管模块。</li>
<li>使用SCSS提高开发效率，使用gzip进行性能优化，压缩资源体积。</li>
</ul>
<h2 id="荣誉奖项" tabindex="-1"> 荣誉奖项</h2>
<ul>
<li>广东省大学生计算机设计大赛一等奖</li>
<li>广东省第十三届蓝桥杯Web应用开发省赛三等奖</li>
<li>第六届粤港澳IT应用系统开发大赛国赛特等奖</li>
<li>广东省“华资杯”省赛二等奖</li>
<li>2021年大学生创新创业训练计划项目国家级立项</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Intro Page</title>
      <link>https://avery-blog.vercel.app/intro.html</link>
      <guid>https://avery-blog.vercel.app/intro.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">Intro Page</source>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="intro-page" tabindex="-1"> Intro Page</h1>
<p>Place your introducation and profile here.</p>
]]></content:encoded>
    </item>
    <item>
      <title>幻灯片页</title>
      <link>https://avery-blog.vercel.app/slide.html</link>
      <guid>https://avery-blog.vercel.app/slide.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">幻灯片页</source>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[
<i>Content not supported</i>]]></content:encoded>
      <enclosure url="https://avery-blog.vercel.app/logo.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>组件禁用</title>
      <link>https://avery-blog.vercel.app/guide/disable.html</link>
      <guid>https://avery-blog.vercel.app/guide/disable.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">组件禁用</source>
      <description>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。
</description>
      <category>使用指南</category>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>

<p>本页面应当禁用了:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>密码加密的文章</title>
      <link>https://avery-blog.vercel.app/guide/encrypt.html</link>
      <guid>https://avery-blog.vercel.app/guide/encrypt.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">密码加密的文章</source>
      <category>使用指南</category>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="密码加密的文章" tabindex="-1"> 密码加密的文章</h1>
<p>实际的文章内容。</p>
<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>
<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown 增强</title>
      <link>https://avery-blog.vercel.app/guide/markdown.html</link>
      <guid>https://avery-blog.vercel.app/guide/markdown.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">Markdown 增强</source>
      <description>VuePress 的每个文档页面都是由 Markdown 渲染而成。所以你需要通过在相应路径创建编写 Markdown 建立你的文档或博客页面。
</description>
      <category>使用指南</category>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[<p>VuePress 的每个文档页面都是由 Markdown 渲染而成。所以你需要通过在相应路径创建编写 Markdown 建立你的文档或博客页面。</p>

<h2 id="markdown-介绍" tabindex="-1"> Markdown 介绍</h2>
<p>如果你是一个新手，还不会编写 Markdown，请先阅读 <a href="https://vuepress-theme-hope.github.io/v2/zh/basic/markdown/README.html" target="_blank" rel="noopener noreferrer">Markdown 介绍</a> 和 <a href="https://vuepress-theme-hope.github.io/v2/zh/basic/markdown/demo.html" target="_blank" rel="noopener noreferrer">Markdown 演示</a>。</p>
<div><p>Frontmatter</p>
<p>Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 <a href="https://vuepress-theme-hope.github.io/v2/zh/basic/vuepress/page.html#front-matter" target="_blank" rel="noopener noreferrer">Frontmatter 介绍</a>。</p>
</div>
<h2 id="vuepress-扩展" tabindex="-1"> VuePress 扩展</h2>
<p>为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。</p>
<p>关于这些扩展，请阅读 <a href="https://vuepress-theme-hope.github.io/v2/zh/basic/vuepress/markdown.html" target="_blank" rel="noopener noreferrer">VuePress 中的 Markdown 扩展</a>。</p>
<h2 id="主题扩展" tabindex="-1"> 主题扩展</h2>
<h3 id="一键启用" tabindex="-1"> 一键启用</h3>
<p>你可以设置 <code>themeconfig.plugins.htmlEnhance.enableAll</code> 启用 <a href="https://vuepress-theme-hope.github.io/v2/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a> 插件的所有功能。</p>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>themeConfig</span><span>:</span> <span>{</span>
    <span>plugins</span><span>:</span> <span>{</span>
      <span>mdEnhance</span><span>:</span> <span>{</span>
        <span>enableAll</span><span>:</span> <span>true</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br></div><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="自定义容器" tabindex="-1"> 自定义容器</h3>
<div>
<p>安全的在 Markdown 中使用 {{ variable }}。</p>
</div>
<div><p>自定义标题</p>
<p>信息容器，包含 <code>代码</code> 与 。</p>
<div><pre><code><span>const</span> a <span>=</span> <span>1</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div></div>
<div><p>自定义标题</p>
<p>提示容器</p>
</div>
<div><p>自定义标题</p>
<p>警告容器</p>
</div>
<div><p>自定义标题</p>
<p>危险容器</p>
</div>
<details><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<details><summary>代码</summary>
<div><pre><code>:::

安全的在 Markdown 中使用 {{ variable }}。

:::

::: info 自定义标题

信息容器

:::

::: tip 自定义标题

提示容器

:::

::: warning 自定义标题

警告容器

:::

::: danger 自定义标题

危险容器

:::

::: details 自定义标题

详情容器

:::
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/container.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="代码块" tabindex="-1"> 代码块</h3>
<CodeGroup>
<CodeGroupItem title="yarn">
<div><pre><code><span>yarn</span> <span>add</span> -D vuepress-theme-hope
</code></pre><div aria-hidden="true"><span>1</span><br></div></div></CodeGroupItem>
<CodeGroupItem title="npm" active>
<div><pre><code><span>npm</span> i -D vuepress-theme-hope
</code></pre><div aria-hidden="true"><span>1</span><br></div></div></CodeGroupItem>
</CodeGroup>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/code-group.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="自定义对齐" tabindex="-1"> 自定义对齐</h3>
<div>
<p>我是居中的</p>
</div>
<div>
<p>我在右对齐</p>
</div>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/align.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="上下角标" tabindex="-1"> 上下角标</h3>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/sup-sub.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="脚注" tabindex="-1"> 脚注</h3>
<p>此文字有脚注<sup></sup>.</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/footnote.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="标记" tabindex="-1"> 标记</h3>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/mark.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="任务列表" tabindex="-1"> 任务列表</h3>
<ul>
<li>
<p><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 计划 1</label></p>
</li>
<li>
<p><input type="checkbox"  disabled="disabled" id="task-item-1"><label for="task-item-1"> 计划 2</label></p>
</li>
<li>
<p><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/tasklist.html" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
</ul>
<h3 id="图表" tabindex="-1"> 图表</h3>
<ChartJS title="一个散点图案例" id="chart-64a56f28" config="%7B%0A%20%20%22type%22%3A%20%22scatter%22%2C%0A%20%20%22data%22%3A%20%7B%0A%20%20%20%20%22datasets%22%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22%E6%95%A3%E7%82%B9%E6%95%B0%E6%8D%AE%E9%9B%86%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%20-10%2C%20%22y%22%3A%200%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%200%2C%20%22y%22%3A%2010%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%2010%2C%20%22y%22%3A%205%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%200.5%2C%20%22y%22%3A%205.5%20%7D%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22rgb(255%2C%2099%2C%20132)%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%0A%20%20%7D%2C%0A%20%20%22options%22%3A%20%7B%0A%20%20%20%20%22scales%22%3A%20%7B%0A%20%20%20%20%20%20%22x%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22type%22%3A%20%22linear%22%2C%0A%20%20%20%20%20%20%20%20%22position%22%3A%20%22bottom%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A"><div><pre><code><span>{</span>
  <span>"type"</span><span>:</span> <span>"scatter"</span><span>,</span>
  <span>"data"</span><span>:</span> <span>{</span>
    <span>"datasets"</span><span>:</span> <span>[</span>
      <span>{</span>
        <span>"label"</span><span>:</span> <span>"散点数据集"</span><span>,</span>
        <span>"data"</span><span>:</span> <span>[</span>
          <span>{</span> <span>"x"</span><span>:</span> <span>-10</span><span>,</span> <span>"y"</span><span>:</span> <span>0</span> <span>}</span><span>,</span>
          <span>{</span> <span>"x"</span><span>:</span> <span>0</span><span>,</span> <span>"y"</span><span>:</span> <span>10</span> <span>}</span><span>,</span>
          <span>{</span> <span>"x"</span><span>:</span> <span>10</span><span>,</span> <span>"y"</span><span>:</span> <span>5</span> <span>}</span><span>,</span>
          <span>{</span> <span>"x"</span><span>:</span> <span>0.5</span><span>,</span> <span>"y"</span><span>:</span> <span>5.5</span> <span>}</span>
        <span>]</span><span>,</span>
        <span>"backgroundColor"</span><span>:</span> <span>"rgb(255, 99, 132)"</span>
      <span>}</span>
    <span>]</span>
  <span>}</span><span>,</span>
  <span>"options"</span><span>:</span> <span>{</span>
    <span>"scales"</span><span>:</span> <span>{</span>
      <span>"x"</span><span>:</span> <span>{</span>
        <span>"type"</span><span>:</span> <span>"linear"</span><span>,</span>
        <span>"position"</span><span>:</span> <span>"bottom"</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></ChartJS><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/chart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="流程图" tabindex="-1"> 流程图</h3>
<i>Content not supported</i><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/flowchart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="mermaid" tabindex="-1"> Mermaid</h3>
<i>Content not supported</i><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/mermaid.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="tex-语法" tabindex="-1"> Tex 语法</h3>
<p class='katex-block'><span><span><span><i>Content not supported</i></span><span aria-hidden="true"><span><span style="height:2.4em;vertical-align:-0.95em;"></span><span><span></span><span><span><span><span style="height:1.3714em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.05556em;">∂</span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:3.0277em;vertical-align:-1.2777em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>{</span></span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.05em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span style="height:3.05em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span><span>​</span></span><span><span style="height:1.2777em;"><span></span></span></span></span></span><span style="margin-right:0.1667em;"></span><span><span></span><span><span><span><span style="height:1.5017em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.1667em;"></span><span>⋯</span><span style="margin-right:0.1667em;"></span><span>(</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span>1</span><span>)</span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02778em;">r</span><span>−</span><span>i</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>}</span></span></span></span></span></span></span></p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/tex.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="代码演示" tabindex="-1"> 代码演示</h3>

<CodeDemo id="code-demo-3c31404e" title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo" code="%7B%22html%22%3A%22%3Ch1%3EVuePress%20Theme%20Hope%3C%2Fh1%3E%5Cn%3Cp%3E%3Cspan%20id%3D%5C%22very%5C%22%3E%E9%9D%9E%E5%B8%B8%3C%2Fspan%3E%E5%BC%BA%E5%A4%A7!%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22%E9%9D%9E%E5%B8%B8%E5%BC%BA%E5%A4%A7%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D">
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>VuePress Theme Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>非常<span><span><span>&lt;/</span>span</span><span>></span></span>强大!<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"非常强大"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div></CodeDemo><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/demo.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="幻灯片" tabindex="-1"> 幻灯片</h3>
<i>Content not supported</i><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/presentation.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<hr>
<section>
<ol>
<li id="footnote1"><p>这是脚注内容 </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>页面配置</title>
      <link>https://avery-blog.vercel.app/guide/page.html</link>
      <guid>https://avery-blog.vercel.app/guide/page.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">页面配置</source>
      <description>more 注释之前的内容被视为文章摘要。
</description>
      <category>使用指南</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>more</code> 注释之前的内容被视为文章摘要。</p>

<h2 id="页面信息" tabindex="-1"> 页面信息</h2>
<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>
<ul>
<li>
<p>作者设置为 Ms.Hope。</p>
</li>
<li>
<p>写作时间应为 2020 年 1 月 1 日</p>
</li>
<li>
<p>分类为 “使用指南”</p>
</li>
<li>
<p>标签为 “页面配置” 和 “使用指南”</p>
</li>
</ul>
<h2 id="页面内容" tabindex="-1"> 页面内容</h2>
<p>你可以自由在这里书写你的 Markdown。</p>
<div><p>提示</p>
<ul>
<li>
<p>Markdown 文件夹的图片请使用相对链接 <code>./</code> 进行引用。</p>
</li>
<li>
<p><code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用</p>
</li>
</ul>
</div>
<p>主题包含了一个自定义徽章章可以使用:</p>
<blockquote>
<p>文字结尾应该有深蓝色的 徽章文字 徽章。 <i>Content not supported</i></p>
</blockquote>
<h2 id="页面结构" tabindex="-1"> 页面结构</h2>
<p>此页面应当包含：</p>
<ul>
<li>返回顶部按钮</li>
<li>路径导航</li>
<li>评论</li>
<li>页脚</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>主要功能与配置演示</title>
      <link>https://avery-blog.vercel.app/guide/</link>
      <guid>https://avery-blog.vercel.app/guide/</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">主要功能与配置演示</source>
      <category>使用指南</category>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="主要功能与配置演示" tabindex="-1"> 主要功能与配置演示</h1>
<ul>
<li>
<p><a href="/guide/page.html">页面展示</a></p>
</li>
<li>
<p><a href="/guide/markdown.html">Markdown 展示</a></p>
</li>
<li>
<p><a href="/guide/disable.html">禁用展示</a></p>
</li>
<li>
<p><a href="/guide/encrypt.html">加密展示</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>幻灯片页</title>
      <link>https://avery-blog.vercel.app/zh/slide.html</link>
      <guid>https://avery-blog.vercel.app/zh/slide.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">幻灯片页</source>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[
<i>Content not supported</i>]]></content:encoded>
      <enclosure url="https://avery-blog.vercel.app/logo.svg" type="image/svg+xml"/>
    </item>
    <item>
      <title>组件禁用</title>
      <link>https://avery-blog.vercel.app/zh/guide/disable.html</link>
      <guid>https://avery-blog.vercel.app/zh/guide/disable.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">组件禁用</source>
      <description>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。
</description>
      <category>使用指南</category>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[<p>你可以通过设置页面的 Frontmatter，在页面禁用一些功能。</p>

<p>本页面应当禁用了:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>密码加密的文章</title>
      <link>https://avery-blog.vercel.app/zh/guide/encrypt.html</link>
      <guid>https://avery-blog.vercel.app/zh/guide/encrypt.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">密码加密的文章</source>
      <category>使用指南</category>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="密码加密的文章" tabindex="-1"> 密码加密的文章</h1>
<p>实际的文章内容。</p>
<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>
<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Markdown 增强</title>
      <link>https://avery-blog.vercel.app/zh/guide/markdown.html</link>
      <guid>https://avery-blog.vercel.app/zh/guide/markdown.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">Markdown 增强</source>
      <description>VuePress 的每个文档页面都是由 Markdown 渲染而成。所以你需要通过在相应路径创建编写 Markdown 建立你的文档或博客页面。
</description>
      <category>使用指南</category>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[<p>VuePress 的每个文档页面都是由 Markdown 渲染而成。所以你需要通过在相应路径创建编写 Markdown 建立你的文档或博客页面。</p>

<h2 id="markdown-介绍" tabindex="-1"> Markdown 介绍</h2>
<p>如果你是一个新手，还不会编写 Markdown，请先阅读 <a href="https://vuepress-theme-hope.github.io/v2/zh/basic/markdown/README.html" target="_blank" rel="noopener noreferrer">Markdown 介绍</a> 和 <a href="https://vuepress-theme-hope.github.io/v2/zh/basic/markdown/demo.html" target="_blank" rel="noopener noreferrer">Markdown 演示</a>。</p>
<div><p>Frontmatter</p>
<p>Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 <a href="https://vuepress-theme-hope.github.io/v2/zh/basic/vuepress/page.html#front-matter" target="_blank" rel="noopener noreferrer">Frontmatter 介绍</a>。</p>
</div>
<h2 id="vuepress-扩展" tabindex="-1"> VuePress 扩展</h2>
<p>为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。</p>
<p>关于这些扩展，请阅读 <a href="https://vuepress-theme-hope.github.io/v2/zh/basic/vuepress/markdown.html" target="_blank" rel="noopener noreferrer">VuePress 中的 Markdown 扩展</a>。</p>
<h2 id="主题扩展" tabindex="-1"> 主题扩展</h2>
<h3 id="一键启用" tabindex="-1"> 一键启用</h3>
<p>你可以设置 <code>themeconfig.plugins.htmlEnhance.enableAll</code> 启用 <a href="https://vuepress-theme-hope.github.io/v2/md-enhance" target="_blank" rel="noopener noreferrer">md-enhance</a> 插件的所有功能。</p>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>themeConfig</span><span>:</span> <span>{</span>
    <span>plugins</span><span>:</span> <span>{</span>
      <span>mdEnhance</span><span>:</span> <span>{</span>
        <span>enableAll</span><span>:</span> <span>true</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div><br><br><div>&nbsp;</div><div>&nbsp;</div><div>&nbsp;</div><br><br><br><br></div><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="自定义容器" tabindex="-1"> 自定义容器</h3>
<div>
<p>安全的在 Markdown 中使用 {{ variable }}。</p>
</div>
<div><p>自定义标题</p>
<p>信息容器，包含 <code>代码</code> 与 。</p>
<div><pre><code><span>const</span> a <span>=</span> <span>1</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div></div>
<div><p>自定义标题</p>
<p>提示容器</p>
</div>
<div><p>自定义标题</p>
<p>警告容器</p>
</div>
<div><p>自定义标题</p>
<p>危险容器</p>
</div>
<details><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<details><summary>代码</summary>
<div><pre><code>:::

安全的在 Markdown 中使用 {{ variable }}。

:::

::: info 自定义标题

信息容器

:::

::: tip 自定义标题

提示容器

:::

::: warning 自定义标题

警告容器

:::

::: danger 自定义标题

危险容器

:::

::: details 自定义标题

详情容器

:::
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/container.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="代码块" tabindex="-1"> 代码块</h3>
<CodeGroup>
<CodeGroupItem title="yarn">
<div><pre><code><span>yarn</span> <span>add</span> -D vuepress-theme-hope
</code></pre><div aria-hidden="true"><span>1</span><br></div></div></CodeGroupItem>
<CodeGroupItem title="npm" active>
<div><pre><code><span>npm</span> i -D vuepress-theme-hope
</code></pre><div aria-hidden="true"><span>1</span><br></div></div></CodeGroupItem>
</CodeGroup>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/code-group.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="自定义对齐" tabindex="-1"> 自定义对齐</h3>
<div>
<p>我是居中的</p>
</div>
<div>
<p>我在右对齐</p>
</div>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/align.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="上下角标" tabindex="-1"> 上下角标</h3>
<p>19<sup>th</sup> H<sub>2</sub>O</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/sup-sub.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="脚注" tabindex="-1"> 脚注</h3>
<p>此文字有脚注<sup></sup>.</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/footnote.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="标记" tabindex="-1"> 标记</h3>
<p>你可以标记 <mark>重要的内容</mark> 。</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/mark.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="任务列表" tabindex="-1"> 任务列表</h3>
<ul>
<li>
<p><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 计划 1</label></p>
</li>
<li>
<p><input type="checkbox"  disabled="disabled" id="task-item-1"><label for="task-item-1"> 计划 2</label></p>
</li>
<li>
<p><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/tasklist.html" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
</ul>
<h3 id="图表" tabindex="-1"> 图表</h3>
<ChartJS title="一个散点图案例" id="chart-64a56f28" config="%7B%0A%20%20%22type%22%3A%20%22scatter%22%2C%0A%20%20%22data%22%3A%20%7B%0A%20%20%20%20%22datasets%22%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22%E6%95%A3%E7%82%B9%E6%95%B0%E6%8D%AE%E9%9B%86%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%20-10%2C%20%22y%22%3A%200%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%200%2C%20%22y%22%3A%2010%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%2010%2C%20%22y%22%3A%205%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%200.5%2C%20%22y%22%3A%205.5%20%7D%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22rgb(255%2C%2099%2C%20132)%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%0A%20%20%7D%2C%0A%20%20%22options%22%3A%20%7B%0A%20%20%20%20%22scales%22%3A%20%7B%0A%20%20%20%20%20%20%22x%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22type%22%3A%20%22linear%22%2C%0A%20%20%20%20%20%20%20%20%22position%22%3A%20%22bottom%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A"><div><pre><code><span>{</span>
  <span>"type"</span><span>:</span> <span>"scatter"</span><span>,</span>
  <span>"data"</span><span>:</span> <span>{</span>
    <span>"datasets"</span><span>:</span> <span>[</span>
      <span>{</span>
        <span>"label"</span><span>:</span> <span>"散点数据集"</span><span>,</span>
        <span>"data"</span><span>:</span> <span>[</span>
          <span>{</span> <span>"x"</span><span>:</span> <span>-10</span><span>,</span> <span>"y"</span><span>:</span> <span>0</span> <span>}</span><span>,</span>
          <span>{</span> <span>"x"</span><span>:</span> <span>0</span><span>,</span> <span>"y"</span><span>:</span> <span>10</span> <span>}</span><span>,</span>
          <span>{</span> <span>"x"</span><span>:</span> <span>10</span><span>,</span> <span>"y"</span><span>:</span> <span>5</span> <span>}</span><span>,</span>
          <span>{</span> <span>"x"</span><span>:</span> <span>0.5</span><span>,</span> <span>"y"</span><span>:</span> <span>5.5</span> <span>}</span>
        <span>]</span><span>,</span>
        <span>"backgroundColor"</span><span>:</span> <span>"rgb(255, 99, 132)"</span>
      <span>}</span>
    <span>]</span>
  <span>}</span><span>,</span>
  <span>"options"</span><span>:</span> <span>{</span>
    <span>"scales"</span><span>:</span> <span>{</span>
      <span>"x"</span><span>:</span> <span>{</span>
        <span>"type"</span><span>:</span> <span>"linear"</span><span>,</span>
        <span>"position"</span><span>:</span> <span>"bottom"</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></ChartJS><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/chart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="流程图" tabindex="-1"> 流程图</h3>
<i>Content not supported</i><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/flowchart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="mermaid" tabindex="-1"> Mermaid</h3>
<i>Content not supported</i><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/mermaid.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="tex-语法" tabindex="-1"> Tex 语法</h3>
<p class='katex-block'><span><span><span><i>Content not supported</i></span><span aria-hidden="true"><span><span style="height:2.4em;vertical-align:-0.95em;"></span><span><span></span><span><span><span><span style="height:1.3714em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.05556em;">∂</span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.5904em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.05556em;">∂</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:3.0277em;vertical-align:-1.2777em;"></span><span><span style="top:0em;"><span>(</span></span><span><span></span><span><span><span><span style="height:1.3414em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span style="margin-right:0.03588em;">ω</span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">y</span><span><span><span><span style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>)</span></span></span><span style="margin-right:0.1667em;"></span><span><span style="top:0em;"><span>{</span></span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span><span><span><span style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span style="height:3.05em;"></span><span><span><span>i</span><span>=</span><span>1</span></span></span></span><span style="top:-3.05em;"><span style="height:3.05em;"></span><span><span>∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span style="height:3.05em;"></span><span><span style="margin-right:0.02778em;">r</span></span></span></span><span>​</span></span><span><span style="height:1.2777em;"><span></span></span></span></span></span><span style="margin-right:0.1667em;"></span><span><span></span><span><span><span><span style="height:1.5017em;"><span style="top:-2.314em;"><span style="height:3em;"></span><span><span><span style="margin-right:0.03588em;">ω</span><span><span><span><span style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span style="height:3em;"></span><span><span>(</span><span>−</span><span>1</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span>i</span></span></span></span></span></span></span></span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.1667em;"></span><span>⋯</span><span style="margin-right:0.1667em;"></span><span>(</span><span style="margin-right:0.02778em;">r</span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span><span>i</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span><span>1</span><span>)</span><span>(</span><span>lo<span style="margin-right:0.01389em;">g</span></span><span style="margin-right:0.1667em;"></span><span style="margin-right:0.03588em;">y</span><span><span>)</span><span><span><span><span style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02778em;">r</span><span>−</span><span>i</span></span></span></span></span></span></span></span></span></span></span></span><span>​</span></span><span><span style="height:0.686em;"><span></span></span></span></span></span><span></span></span><span style="top:0em;"><span>}</span></span></span></span></span></span></span></p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/tex.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="代码演示" tabindex="-1"> 代码演示</h3>

<CodeDemo id="code-demo-3c31404e" title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo" code="%7B%22html%22%3A%22%3Ch1%3EVuePress%20Theme%20Hope%3C%2Fh1%3E%5Cn%3Cp%3E%3Cspan%20id%3D%5C%22very%5C%22%3E%E9%9D%9E%E5%B8%B8%3C%2Fspan%3E%E5%BC%BA%E5%A4%A7!%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22%E9%9D%9E%E5%B8%B8%E5%BC%BA%E5%A4%A7%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D">
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>VuePress Theme Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>非常<span><span><span>&lt;/</span>span</span><span>></span></span>强大!<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"非常强大"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div></CodeDemo><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/demo.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h3 id="幻灯片" tabindex="-1"> 幻灯片</h3>
<i>Content not supported</i><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/presentation.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<hr>
<section>
<ol>
<li id="footnote1"><p>这是脚注内容 </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>页面配置</title>
      <link>https://avery-blog.vercel.app/zh/guide/page.html</link>
      <guid>https://avery-blog.vercel.app/zh/guide/page.html</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">页面配置</source>
      <description>more 注释之前的内容被视为文章摘要。
</description>
      <category>使用指南</category>
      <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><code>more</code> 注释之前的内容被视为文章摘要。</p>

<h2 id="页面信息" tabindex="-1"> 页面信息</h2>
<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>
<ul>
<li>
<p>作者设置为 Ms.Hope。</p>
</li>
<li>
<p>写作时间应为 2020 年 1 月 1 日</p>
</li>
<li>
<p>分类为 “使用指南”</p>
</li>
<li>
<p>标签为 “页面配置” 和 “使用指南”</p>
</li>
</ul>
<h2 id="页面内容" tabindex="-1"> 页面内容</h2>
<p>你可以自由在这里书写你的 Markdown。</p>
<div><p>提示</p>
<ul>
<li>
<p>Markdown 文件夹的图片请使用相对链接 <code>./</code> 进行引用。</p>
</li>
<li>
<p><code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用</p>
</li>
</ul>
</div>
<p>主题包含了一个自定义徽章章可以使用:</p>
<blockquote>
<p>文字结尾应该有深蓝色的 徽章文字 徽章。 <i>Content not supported</i></p>
</blockquote>
<h2 id="页面结构" tabindex="-1"> 页面结构</h2>
<p>此页面应当包含：</p>
<ul>
<li>返回顶部按钮</li>
<li>路径导航</li>
<li>评论</li>
<li>页脚</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>主要功能与配置演示</title>
      <link>https://avery-blog.vercel.app/zh/guide/</link>
      <guid>https://avery-blog.vercel.app/zh/guide/</guid>
      <source url="https://avery-blog.vercel.app/rss.xml">主要功能与配置演示</source>
      <category>使用指南</category>
      <pubDate>Tue, 19 Apr 2022 16:46:30 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="主要功能与配置演示" tabindex="-1"> 主要功能与配置演示</h1>
<ul>
<li>
<p><a href="/zh/guide/page.html">页面展示</a></p>
</li>
<li>
<p><a href="/zh/guide/markdown.html">Markdown 展示</a></p>
</li>
<li>
<p><a href="/zh/guide/disable.html">禁用展示</a></p>
</li>
<li>
<p><a href="/zh/guide/encrypt.html">加密展示</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
  </channel>
</rss>